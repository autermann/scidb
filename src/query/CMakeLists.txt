########################################
# BEGIN_COPYRIGHT
#
# This file is part of SciDB.
# Copyright (C) 2008-2011 SciDB, Inc.
#
# SciDB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
# INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
# NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
# the GNU General Public License for the complete license terms.
#
# You should have received a copy of the GNU General Public License
# along with SciDB.  If not, see <http://www.gnu.org/licenses/>.
#
# END_COPYRIGHT
########################################

add_subdirectory("ops")

bison(AQLParser parser/AQLGrammar.yy ${CMAKE_CURRENT_BINARY_DIR}/parser/AQLParser.cpp)
flex(AQLScanner parser/AQLLexems.ll ${CMAKE_CURRENT_BINARY_DIR}/parser/AQLScanner.cpp)
add_flex_bison_dependency(AQLScanner AQLParser)

bison(AFLParser parser/AFLGrammar.yy ${CMAKE_CURRENT_BINARY_DIR}/parser/AFLParser.cpp FLAGS "-p zz")
flex(AFLScanner parser/AFLLexems.ll ${CMAKE_CURRENT_BINARY_DIR}/parser/AFLScanner.cpp)
add_flex_bison_dependency(AFLScanner AFLParser)

file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/parser)

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/parser/)
set(query_parser_src
	${CMAKE_CURRENT_BINARY_DIR}/parser/AQLParser.cpp
	${CMAKE_CURRENT_BINARY_DIR}/parser/AFLParser.cpp
	parser/AST.cpp
	parser/QueryParser.cpp
	parser/AQLKeywords.cpp
	parser/AFLKeywords.cpp
	parser/Serialize.cpp
	parser/AFLParserWrapper.cpp
	parser/AQLParserWrapper.cpp
	parser/ALTranslator.cpp
)

file(GLOB qproc_include "*.h" "*.inc" "executor/*.h" "optimizer/*.h" "util/{na,naInternal,require}.h"
	"parser/*.h" "parser/*.yy" "parser/*.ll"
	"${CMAKE_CURRENT_BINARY_DIR}/parser/*.hpp" #This is just for activating hack for bison generated headers...
	)

#
# HACKS BEGINS HERE
#

# Fixing isatty declaration in source file generated by FLEX on linux.
# Related bug: http://sourceforge.net/tracker/index.php?func=detail&aid=1984987&group_id=97492&atid=618177

set(aql_scanner_src ${CMAKE_CURRENT_BINARY_DIR}/parser/AQLScanner.cpp)
set(afl_scanner_src ${CMAKE_CURRENT_BINARY_DIR}/parser/AFLScanner.cpp)

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(aql_scanner_fixed_src ${CMAKE_CURRENT_BINARY_DIR}/parser/AQLScanner.fixed.cpp)
	add_custom_command(
		OUTPUT ${aql_scanner_fixed_src}
		COMMAND ${SED_EXECUTABLE} 's/isatty \(int \)\;/isatty \(int \) __THROW\;/' ${aql_scanner_src} > ${aql_scanner_fixed_src}
		DEPENDS ${aql_scanner_src}
		COMMENT "Fixing generated FLEX source. During building file '${aql_scanner_fixed_src}' will be used instead '${aql_scanner_src}'!"
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/parser/
	)
	
	set(afl_scanner_fixed_src ${CMAKE_CURRENT_BINARY_DIR}/parser/AFLScanner.fixed.cpp)
	add_custom_command(
		OUTPUT ${afl_scanner_fixed_src}
		COMMAND ${SED_EXECUTABLE} 's/isatty \(int \)\;/isatty \(int \) __THROW\;/' ${afl_scanner_src} > ${afl_scanner_fixed_src}
		DEPENDS ${afl_scanner_src}
		COMMENT "Fixing generated FLEX source. During building file '${afl_scanner_fixed_src}' will be used instead '${afl_scanner_src}'!"
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/parser/
	)
else(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(aql_scanner_fixed_src ${aql_scanner_src})
	set(afl_scanner_fixed_src ${afl_scanner_src})
endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

#
# HACKS ENDS HERE
#

# One can create subdirectory here for every component
set (scalar_proc_src
    LogicalExpression.cpp
    Expression.cpp
    UDT.cpp
    FunctionLibrary.cpp
    FunctionDescription.cpp
    TypeSystem.cpp
    BuiltinAggregates.cpp
    TileFunctions.cpp
    Aggregate.cpp
)

add_library(scalar_proc_lib STATIC ${scalar_proc_src} ${qproc_include})
target_link_libraries(scalar_proc_lib ${Boost_LIBRARIES})
target_link_libraries(scalar_proc_lib network_lib util_lib)

set (qproc_src
    optimizer/Optimizer.cpp
    optimizer/L2POptimizer.cpp
    optimizer/HabilisOptimizer.cpp
    QueryPlan.cpp
    OperatorLibrary.cpp
    QueryProcessor.cpp
    Query.cpp
    Statistics.cpp
    executor/SciDBExecutor.cpp
    RemoteArray.cpp
    Operator.cpp
)

add_library(qproc_lib STATIC ${qproc_src} ${query_parser_src} ${aql_scanner_fixed_src} ${afl_scanner_fixed_src} ${qproc_include})
target_link_libraries(qproc_lib ${Boost_LIBRARIES})
target_link_libraries(qproc_lib scalar_proc_lib compression_lib array_lib ops_lib system_lib)
