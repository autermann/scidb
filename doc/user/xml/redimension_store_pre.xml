<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>redimension_store</refname>

    <refpurpose>Produces a stored array using some or all of the variables of
    a source array, potentially changing some or all of those variables from
    dimensions to attributes or vice versa, and optionally calculating
    aggregates to be included in the new array.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>redimension_store(<replaceable>source_array</replaceable>,<replaceable>named_target_array
                  </replaceable><optional>, <replaceable>aggregate </replaceable>(source_attribute) 
                            [as  result_attribute]</optional>...);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The redimension_store operator produces a stored result array using
    data from a source array.</para>

    <para>When you use redimension_store, you must decide two things:</para>

    <itemizedlist>
      <listitem>
        <para>How will the variables of the source array appear in the target
        array?</para>
      </listitem>

      <listitem>
        <para>How will cell collisions be handled?</para>
      </listitem>
    </itemizedlist>

    <para>For each variable of the source array, you have these choices for
    how to use it in the target array:</para>

    <itemizedlist>
      <listitem>
        <para>Include the variable without modification (i.e., an attribute
        remains an attribute and a dimension remains a dimension).</para>

        <para>To include an attribute without modification, simply include in
        the schema definition of the target array an attribute of the same
        data type with the same name. The analogous rule holds for including
        dimensions without modification.</para>
      </listitem>

      <listitem>
        <para>Include the variable, but convert it (from an attribute to a
        dimension or vice versa)</para>

        <para>To convert an attribute to a dimension, simply include in the
        schema definition for the target array a dimension with the same name
        and datatype as the attribute from the source array. The analogous
        process holds for converting dimensions to attributes.</para>
      </listitem>

      <listitem>
        <para>Exclude the variable</para>

        <para>To exclude a variable, simply omit it from the schema definition
        of the target array. Even if you exclude a variable, its data can
        still contribute to the target array through aggregates.</para>
      </listitem>
    </itemizedlist>

    <para>Note that a single use of the redimension_store operator can make
    all of the above kinds of modifications to the various variables in the
    source array.</para>

    <para>Depending on how you arrange the source array's variables in the
    target array, the redimension_store operator might encounter cell
    collisions. A cell collision occurs when the redimension_store operator
    generates multiple candidate cells for a single cell location of the
    target array.</para>

    <para>There are several ways to handle cell collisions. The most
    straightforward is to retain an entire vector of candidate cells along an
    auxilliary dimension sometiems called a "synthetic dimension." the
    synthetic dimension must be declared in the target schema and its data
    type must be int64.</para>

    <para>If you do not use a synthetic dimension and the redimension_store
    operator produces a collision at a cell location, SciDB will produce a
    single cell from all of the candidate cells. The attributes of that cell
    in the target array will be populated as follows:</para>

    <itemizedlist>
      <listitem>
        <para>If the target attribute was declared as the value of an
        aggregate function, the value will be the value of that function
        calculated over the set of candidate cells for that cell location. For
        each aggregate you calculate, a nullable attribute to accommodate it
        must exist in the target array's schema. the attribute must have the
        appropriate datatype for that aggregate function.</para>
      </listitem>

      <listitem>
        <para>If the target attribute is simply the value of an attribute from
        the source array (rather than an aggregate function), the value of the
        target attribute will be from an arbitrarily chosen candidate cell for
        that location. If there are several such attributes in the target
        array, their values will all come from the same candidate cell.</para>
      </listitem>
    </itemizedlist>

    <para>The argument <replaceable>named_target_array</replaceable> must be
    an array that was previously created in SciDB. The target array's schema
    must accommodate the output of the redimension_store operator.
    Specifically:</para>

    <itemizedlist>
      <listitem>
        <para>If a variable in the source array appears in the target array,
        the two variables must match in name and data type.</para>
      </listitem>

      <listitem>
        <para>If the redimension_store operator uses an aggregate, an
        attribute for that aggregate value must exist in the target array. The
        attribute must allow nulls and must be of the appropriate datatype for
        that aggregate function.</para>
      </listitem>

      <listitem>
        <para>If the target array includes a synthetic dimension, the datatype
        of that dimension must be int64.</para>
      </listitem>

      <listitem>
        <para>The target array cannot include any other variables besides
        variables that appear in the source array, attributes to accommodate
        aggregate values, and one synthetic dimension.</para>
      </listitem>

      <listitem>
        <para>The target array can include a synthetic dimension OR a set of
        attributes for aggregate values, but not both. In other words, you can
        choose to handle collisions by calculating aggregates or by
        maintaining a vector with all the candidate cell values for each cell
        location, but not both.</para>
      </listitem>
    </itemizedlist>

    <para>If cell collisions occur, but the target array includes neither a
    synthetic dimension nor aggregates, SciDB will arbitrarily choose a cell
    from the set of candidate cells.</para>
  </refsect1>

  <refsect1>
    <title>Example One</title>

    <informalexample>
      <para>This example creates a two-dimension, two-attribute array and then
      uses the redimension_store operator to populate it with data from a
      one-dimension, four-attribute array.</para>

      <procedure>
        <step>
          <para>Show the data in the source array.<programlisting
          language="test">--aql create array ddFlat 
      &lt;patientID:int64,elapsedTime:int64,pulse:int64,ppm:int64&gt; 
      [csvRow=0:1000,1000,0]; 
 --show-query=no 
 --show-output=no
--shell --command=csv2scidb -s 1 -p NNNN &lt; ../examples/doseData.csv &gt; ../examples/doseData.scidb 
 --show-query=no 
 --show-output=no
--aql load ddFlat 
      from '../examples/doseData.scidb'; 
 --show-query=no 
 --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Create the target array.<programlisting language="test">--aql create array doseData  
      &lt;pulse:int64,ppm:int64&gt; 
      [patientID=1:100,100,0,elapsedTime=0:999,1000,0] 
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<programlisting language="test">--afl redimension_store(ddFlat,doseData) 
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Two</title>

    <informalexample>
      <para>This example converts the result array from the previous example
      from a two-dimension, two-attribute array into a three-dimension,
      one-attribute array. The resulting array supports queries that assess
      how pulse and elapsed time affect blood count (in parts per
      million).</para>

      <procedure>
        <step>
          <para>Create the target array.<programlisting language="test">--aql create array ppmFunction  
      &lt;ppm:int64&gt; 
      [patientID=1:100,100,0,elapsedTime=0:999,1000,0,pulse=0:300,301,0] 
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<programlisting language="test">--afl redimension_store(doseData,ppmFunction) 
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Three</title>

    <informalexample>
      <para>This example converts the result array from the previous example
      into a different array in which one attribure becomes a dimension and
      one dimemsion becomes an attribute. The new array supports queries that
      assess how blood count (in parts per million) and elapsed time affect
      pulse.</para>

      <procedure>
        <step>
          <para>Create the target array.<programlisting language="test">--aql create array pulseFunction  
      &lt;pulse:int64&gt; 
      [patientID=1:100,100,0,
       elapsedTime=0:999,1000,0,
       ppm=0:10000,10001,0] 
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<programlisting language="test">--afl redimension_store(doseData,pulseFunction) 
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Four</title>

    <informalexample>
      <para>This example shows three different ways to handle
      collisions.</para>

      <procedure>
        <step>
          <para>Show the source array.<programlisting language="test">--aql create array nwFlat 
      &lt;event:string,year:int64,person:string,country:string,time:double&gt; 
      [csvRow=0:11,12,0]
 --show-query=no 
 --show-output=no
--shell --command=csv2scidb -s 1 -p SNSSN &lt; ../examples/nationWinners.csv &gt; ../examples/nationWinners.scidb 
 --show-query=no 
 --show-output=no
--aql load nwFlat 
      from '../examples/nationWinners.scidb'; 
 --show-query=no 
 --show-output=no
--aql create array 
      nationWinners 
      &lt;person:string,country:string,time:double&gt; 
      [event(string)=3,3,0,year=1996:2008,13,0];
 --show-query=no 
 --show-output=no
--afl redimension_store(nwFlat,nationWinners) 
 --show-query=no 
 --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Create an array to accommodate data where each non-empty cell
          will show a (country,year) pair of a country with at least one
          victory in that year, along with a count of the number of victories
          that country had during that year.<programlisting language="test">--aql create array victoryCountPerCountryYear 
      &lt;victoryCount:uint64 null&gt; 
      [year=1996:2008,13,0,country(string)=300,300,0];
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the array with data. Note
          that the redimension_store operator encounters a collision (as
          revealed by the cell with a count greater than 1 in the
          result).<programlisting language="test">--afl redimension_store
      (nationWinners,
       victoryCountPerCountryYear,
       count(*) as victoryCount)
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>

        <step>
          <para>Create an array that includes a synthetic dimension (synD) for
          collisions. The other (non-synthetic) dimensions define
          (country,year) pairs. The attributes accommodate all other variables
          from the original array, nationWinners.<programlisting
          language="test">--aql create array vPer_CY_Synthetic 
      &lt;person:string,event:string,time:double&gt; 
      [country(string)=300,300,0,year=1996:2008,13,0,synD=1:6,6,0]
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the array with data. Note
          that the redimension_store operator encounters a collision (as
          revealed by the cell whose value for synD is greater than
          1).<programlisting language="test">--afl redimension_store(nationWinners,vPer_CY_Synthetic)
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>

        <step>
          <para>Create an array whose dimensions define (country,year) pairs.
          The attributes accommodate all other variables from the original
          array, nationWinners. Note that the array schema includes neither a
          synthetic dimension nor any attribute to accommodate aggregate
          values.<programlisting language="test">--aql create array arbitraryWinner 
      &lt;person:string,event:string,time:double&gt; 
      [country(string)=300,300,0,year=1996:2008,13,0]
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the array with data. Note
          that the redimension_store operator encounters a collision (for
          Kenya, 2008), and resolves it by arbitrarily choosing one of the
          Kenyan victories of that year.<programlisting language="test">--afl redimension_store(nationWinners,arbitraryWinner)
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Five</title>

    <informalexample>
      <para>This example shows that a single synthetic dimension applies, even
      if the redimension_store operator eliminates multiple dimensions from
      the source array.</para>

      <procedure>
        <step>
          <para>Show the source array.<programlisting language="test">--afl scan(nationWinners) 
 --show-query=yes
 --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Create an array to accommodate data where each non-empty cell
          will describe a country with at least one victory in the original
          data, along with a count of the number of victories that country
          has.<programlisting language="test">--aql create array victoryCountPerCountry 
      &lt;victoryCount:uint64 null&gt; 
      [country(string)=300,300,0];
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the array with data. Note
          that the redimension_store operator encounters collisions (as
          revealed by the cells with a count greater than 1 in the
          result).<programlisting language="test">--afl redimension_store
        (nationWinners,
         victoryCountPerCountry,
         count(*) as victoryCount)
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>

        <step>
          <para>Create an array that includes a synthetic dimension (synD) for
          collisions. The other (non-synthetic) dimension defines countries.
          The attributes accommodate all other attributes from the original
          array.<programlisting language="test">--aql create array vPer_C_Synthetic 
      &lt;person:string,event:string,time:double&gt; 
      [country(string)=300,300,0,synD=1:6,6,0]
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the array with data. Note
          that the redimension_store operator encounters collisions for two
          reasons:</para>

          <itemizedlist>
            <listitem>
              <para>Event is not a dimension in the target array, and one
              country (Kenya) has won multiple events (steeplechase and
              marathon)</para>
            </listitem>

            <listitem>
              <para>Year is not a dimension in the target array, and two
              countries (Kenya and USA) have won in multiple years.</para>
            </listitem>
          </itemizedlist>

          <para>Also note that despite the two reasons collisions, a single
          synthetic dimension suffices to accommodate all the cells that
          constitute the collisions.<programlisting language="test">--afl redimension_store(nationWinners,vPer_C_Synthetic)
 --show-query=yes 
 --show-output=yes</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Six</title>

    <informalexample>
      <para>This example shows a collision-handling strategy in which the
      target array includes some attributes with values from an arbitrarily
      chosen candidate cell and other attributes whose values are aggregates
      calculated over the set of candidate cells.</para>

      <procedure>
        <step>
          <para>Show the source array.<programlisting language="test">--aql create array namesFlat 
      &lt; givenName:string,
        surname:string,
        a:int64,
        b:int64 null,
        c:int64, 
        d:int64&gt; 
      [ csvRow=0:6,6,0 ]
 --show-query=no 
 --show-output=no
--shell --command=csv2scidb -s 1 -p SSNNNN 
          &lt; ../examples/namesData.csv &gt; 
            ../examples/namesData.scidb 
 --show-query=no 
 --show-output=no
--aql load namesFlat 
      from '../examples/namesData.scidb'; 
 --show-query=no 
 --show-output=no
--aql create array names 
         &lt;a:int64, b:int64 null, c:int64, d:int64&gt; 
         [givenName(string)=5,5,0,surname(string)=5,5,0]
 --show-query=no 
 --show-output=no
--afl redimension_store(namesFlat,names) 
 --show-query=no 
 --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Create an array to be the target of the redimension_store
          operator. Note that the array excludes one attribute (a) from the
          source array, includes two other attributes (b and c), and declares
          another attribute (avgD) to accommodate the value of an aggregate.
          Notice also that the target array excludes one of the dimensions
          (givenName) of the source array, so the redimension_store operator
          will generate collisions.<programlisting language="test">--aql create array namesRedimensioned 
        &lt;b:int64 null, c:int64, avgD:double null&gt; 
        [surname(string)=5,5,0]
 --show-query=yes 
 --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data.
          <programlisting language="test">--afl redimension_store
       (names,
        namesRedimensioned,
        avg(d) as avgD)
 --show-query=yes 
 --show-output=yes</programlisting>The redimension_store operation yields a
          target array with three cells. The first cell is not the result of a
          collision (because the source array included only one person with
          surname "Richards.") The second and third cells are the result of
          collisions.</para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
