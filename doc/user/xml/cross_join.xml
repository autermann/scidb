<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<refentry>
  <refnamediv>
    <refname>cross_join</refname>
    <refpurpose>Cross-product join with equality predicates</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis><command>SELECT</command> * <command>INTO</command> <replaceable>target_array</replaceable> 
   <command>FROM</command> cross_join(<replaceable>left_array</replaceable>,<replaceable>right_array</replaceable>,<replaceable>left_dim1</replaceable>,<replaceable>right_dim1</replaceable>,...);

store(cross_join(<replaceable>left_array</replaceable>,<replaceable>right_array</replaceable>,<replaceable>left_dim1</replaceable>,<replaceable>right_dim1</replaceable>,...),
   <replaceable>target_array</replaceable>);</synopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Summary</title>
    <para>Calculates the cross product join of two arrays, say A (m-dimensional array) and B (n-dimensional array) with
equality predicates applied to pairs of dimensions, one from each input. Predicates can only be computed
along dimension pairs that are aligned in their type, size, and chunking.
</para>
    <para>Assume p such predicates in the cross_join, then the result is an m+n-p dimensional array in which each cell
is computed by concatenating the attributes as follows:
</para>
    <para>For a 2-dimensional array A with dimensions i, j, and a 1-dimensional array B with dimension k,
cross_join(A, B, j, k) results in a 2-dimensional array with coordinates {i, j} in which the cell at coordinate
position {i, j} of the output is computed as the concatenation of cells {i, j} of A with cell at coordinate {k=j}
of B.
</para>
<para>If the join dimensions are different lengths, the cross-join will return the smaller dimension for the join points.</para>
  </refsect1>
  <refsect1>
    <title>Example</title>
    <informalexample>
      <para>This example returns the cross-join of a 3<symbol role="symbolfont">&times;</symbol>3 array with a vector of length 3.</para>
      <procedure>
        <step>
          <para>Create an array called left_array:<programlisting>CREATE ARRAY left_array&lt;val:double&gt;[i=0:2,3,0, j=0:2,3,0];</programlisting></para>
        </step>
        <step>
          <para>Store values of 0&ndash;8 into left array:<programlisting>store(build(left_array,i*3+j),left_array);</programlisting></para>
        </step>
        <step>
          <para>Create an array called right_array:<programlisting>CREATE ARRAY right_array&lt;val:double&gt;[k=0:5,3,0];</programlisting></para>
        </step>
        <step>
          <para>Store values of 101&ndash;106 into right_array:</para>
          <programlisting>store(build(right_array,k+101),right_array);</programlisting>
        </step>
        <step>
          <para>Perform a cross-join on left_array and right_array along dimension j of left_array:<programlisting>cross_join(left_array,right_array,j,k);</programlisting>This query outputs:<screen>[
[(0,101),(1,102),(2,103)],
[(3,101),(4,102),(5,103)],
[(6,101),(7,102),(8,103)]
]</screen></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
