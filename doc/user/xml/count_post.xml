<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>count</refname>

    <refpurpose><indexterm>
        <primary>count</primary>
      </indexterm>Returns a count of non-empty cells.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>count(<replaceable>array</replaceable><optional> ,<replaceable>dimension_1</replaceable>,<replaceable>dimension_2</replaceable>,...</optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The count operator counts nonempty cells of the input array. When
    dimensions are provided they are used to do a group-by and a count per
    resulting group is returned. When dimensions are provided, they are used
    to do a group-by, and a count per resulting group is returned.</para>

    <note>
      <para>The count aggregate provides similar functionality to the count
      operator. For details, see the <link linkend="countAggregate">count</link> aggregate reference.</para>
    </note>
  </refsect1>

  <refsect1>
    <title>Example</title>

    <informalexample>
      <para>This example finds the element count value along the first and
      second dimension of a 4<symbol role="symbolfont">×</symbol>4 array where
      some cells are empty.</para>

      <procedure>
        <step>
          <para>Create an array named source_array:<para><programlisting>AFL% CREATE ARRAY source_array&lt;val:double&gt;[i=0:3,4,0,j=0:3,4,0];  </programlisting></para></para>
        </step>

        <step>
          <para>Store values of 0–15 in source_array:<para><programlisting>AFL% store(build(source_array,i*4+j),source_array);  </programlisting><screen>[
[(0),(1),(2),(3)],
[(4),(5),(6),(7)],
[(8),(9),(10),(11)],
[(12),(13),(14),(15)]
]</screen></para></para>
        </step>

        <step>
          <para>Use between to create some empty cells in source_array and
          store the result in count_array:<para><programlisting>AFL% store(between(source_array,1,1,1,2),count_array);  </programlisting><screen>[
[(),(),(),()],
[(),(5),(6),()],
[(),(),(),()],
[(),(),(),()]
]</screen></para></para>
        </step>

        <step>
          <para>Find the count of nonempty elements in
          count_array:<para><programlisting>AFL% count(count_array);  </programlisting><screen>[(2)]
</screen></para></para>
        </step>

        <step>
          <para>Count the nonempty elements along the dimensions of
          count_array:<para><programlisting>AFL% count(count_array,i);  </programlisting><screen>[(0),(2),(0),(0)]
</screen><para><programlisting>AFL% count(count_array,j);  </programlisting><screen>[(0),(1),(1),(0)]
</screen></para></para></para>
        </step>

        <step>
          <para>If we specify both dimensions, the operator returns an array
          of the original size, with a single value that represents whether or
          not each cell is empty:<para><programlisting>AFL% count(count_array,i,j);  </programlisting><screen>[
[(0),(0),(0),(0)],
[(0),(1),(1),(0)],
[(0),(0),(0),(0)],
[(0),(0),(0),(0)]
]</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
