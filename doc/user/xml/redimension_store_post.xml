<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv id="redimensionStore">
    <refname>redimension_store</refname>

    <refpurpose><indexterm>
        <primary>redimension</primary>

        <secondary>redimension_store</secondary>
      </indexterm><indexterm>
        <primary>dimensions</primary>

        <secondary>adding</secondary>
      </indexterm><indexterm>
        <primary>dimensions</primary>

        <secondary>redimensioning</secondary>
      </indexterm><indexterm>
        <primary>redimension_store</primary>
      </indexterm>Produces a stored array using some or all of the variables
    of a source array, potentially changing some or all of those variables
    from dimensions to attributes or vice versa, and optionally calculating
    aggregates to be included in the new array.</refpurpose>

    <para><indexterm>
        <primary>deprecated</primary>

        <secondary>redimension_store</secondary>
      </indexterm><emphasis role="bold">Deprecated. </emphasis>The
    <code>redimension_store</code> operator may be removed in the future. We
    recommend that you use <code>store(redimension())</code> instead.</para>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>redimension_store(<replaceable>source_array</replaceable>,<replaceable>named_target_array
                  </replaceable><optional>, <replaceable>aggregate_call_n </replaceable>(source_attribute) 
                            [as  result_attribute]</optional>...);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The redimension_store operator produces a stored result array using
    data from a source array. Many of the considerations and details are the
    same as for the redimension operator, the main difference being that
    redimension_store saves the results to the
    <replaceable>named_target_array</replaceable>.</para>

    <para>In fact, <command>redimension_store(...)</command> works exactly the
    same as <command>store(redimension(...)</command>. For details, see the
    <link linkend="redimension">redimension reference
    documentation</link>.</para>

    <para>The argument <replaceable>named_target_array</replaceable> must be
    an array that was previously created in SciDB. The target array's schema
    must accommodate the output of the redimension_store operator.
    Specifically:</para>

    <itemizedlist>
      <listitem>
        <para>If a variable in the source array appears in the target array,
        the two variables must match in name and data type.</para>
      </listitem>

      <listitem>
        <para>If the redimension_store operator uses an aggregate, an
        attribute for that aggregate value must exist in the target array. The
        attribute must allow nulls and must be of the appropriate datatype for
        that aggregate function.</para>
      </listitem>

      <listitem>
        <para>If the target array includes a synthetic dimension, the datatype
        of that dimension must be int64.</para>
      </listitem>

      <listitem>
        <para>The target array cannot include any other variables besides
        variables that appear in the source array, attributes to accommodate
        aggregate values, and one synthetic dimension.</para>
      </listitem>

      <listitem>
        <para>The target array can include a synthetic dimension OR a set of
        attributes for aggregate values, but not both. In other words, you can
        choose to handle collisions by calculating aggregates or by
        maintaining a vector with all the candidate cell values for each cell
        location, but not both.</para>
      </listitem>
    </itemizedlist>

    <para><indexterm>
        <primary>collisions</primary>
      </indexterm>If cell collisions occur, but the target array includes
    neither a synthetic dimension nor aggregates, SciDB will arbitrarily
    choose a cell from the set of candidate cells.</para>
  </refsect1>

  <refsect1>
    <title>Inputs</title>

    <para>The <literal>redimension_store</literal> operator takes the
    following arguments:<itemizedlist>
        <listitem>
          <para><emphasis role="bold">source_array</emphasis>: a source array
          with one or more attributes and one or more dimensions.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">target_array</emphasis>: a pre-existing,
          output array, with one or more attributes and one or more
          dimensions. All the dimensions in the target must exist either in
          the source array attributes or dimensions, with one exception. One
          new, synthetic dimension is allowed. All the target attributes
          (other than those that are the results of aggregate calls) must
          exist either in the source array attributes or dimensions.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">aggregate_call</emphasis>_<replaceable>n</replaceable>:
          Zero or more aggregate calls.</para>
        </listitem>
      </itemizedlist></para>
  </refsect1>

  <refsect1>
    <title>Example One</title>

    <informalexample>
      <para>This example creates a two-dimension, two-attribute array and then
      uses the redimension_store operator to populate it with data from a
      one-dimension, four-attribute array.</para>

      <procedure>
        <step>
          <para>Show the data in the source array.<para><screen>{csvRow} patientID,elapsedTime,pulse,ppm
{0} 1,0,72,10
{1} 1,10,75,434
{2} 1,20,77,676
{3} 1,25,76,721
{4} 1,30,77,744
{5} 1,60,82,654
{6} 1,120,68,377
{7} 1,300,70,89
{8} 2,0,86,20
{9} 2,10,86,544
{10} 2,20,87,689
{11} 2,25,90,804
{12} 2,30,85,922
{13} 2,60,81,1067
{14} 2,120,79,866
{15} 2,300,79,645
{16} 3,0,68,17
{17} 3,10,68,333
{18} 3,20,65,444
{19} 3,25,70,606
{20} 3,30,70,673
{21} 3,60,77,624
{22} 3,120,78,508
{23} 3,300,78,212
</screen></para></para>
        </step>

        <step>
          <para>Create the target array.<para><programlisting>AQL% <command>CREATE ARRAY</command> doseData  
      &lt;pulse:int64,ppm:int64&gt; 
      [patientID=1:100,100,0,elapsedTime=0:999,1000,0] 
  </programlisting></para></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<para><programlisting>AFL% redimension_store(ddFlat,doseData) 
  </programlisting><screen>{patientID,elapsedTime} pulse,ppm
{1,0} 72,10
{1,10} 75,434
{1,20} 77,676
{1,25} 76,721
{1,30} 77,744
{1,60} 82,654
{1,120} 68,377
{1,300} 70,89
{2,0} 86,20
{2,10} 86,544
{2,20} 87,689
{2,25} 90,804
{2,30} 85,922
{2,60} 81,1067
{2,120} 79,866
{2,300} 79,645
{3,0} 68,17
{3,10} 68,333
{3,20} 65,444
{3,25} 70,606
{3,30} 70,673
{3,60} 77,624
{3,120} 78,508
{3,300} 78,212
</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Two</title>

    <informalexample>
      <para>This example converts the result array from the previous example
      from a two-dimension, two-attribute array into a three-dimension,
      one-attribute array. The resulting array supports queries that assess
      how pulse and elapsed time affect blood count (in parts per
      million).</para>

      <procedure>
        <step>
          <para>Create the target array.<para><programlisting>AQL% <command>CREATE ARRAY</command> ppmFunction  
      &lt;ppm:int64&gt; 
      [patientID=1:100,100,0,
       elapsedTime=0:999,1000,0,pulse=0:300,301,0] 
  </programlisting></para></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<para><programlisting>AFL% redimension_store(doseData,ppmFunction) 
  </programlisting><screen>{patientID,elapsedTime,pulse} ppm
{1,0,72} 10
{1,10,75} 434
{1,20,77} 676
{1,25,76} 721
{1,30,77} 744
{1,60,82} 654
{1,120,68} 377
{1,300,70} 89
{2,0,86} 20
{2,10,86} 544
{2,20,87} 689
{2,25,90} 804
{2,30,85} 922
{2,60,81} 1067
{2,120,79} 866
{2,300,79} 645
{3,0,68} 17
{3,10,68} 333
{3,20,65} 444
{3,25,70} 606
{3,30,70} 673
{3,60,77} 624
{3,120,78} 508
{3,300,78} 212
</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Example Three</title>

    <informalexample>
      <para>This example converts the result array from the previous example
      into a different array in which one attribute becomes a dimension and
      one dimension becomes an attribute. The new array supports queries that
      assess how blood count (in parts per million) and elapsed time affect
      pulse.</para>

      <procedure>
        <step>
          <para>Create the target array.<para><programlisting>AQL% <command>CREATE ARRAY</command> pulseFunction  
      &lt;pulse:int64&gt; 
      [patientID=1:100,100,0,
       elapsedTime=0:999,1000,0,
       ppm=0:10000,10001,0] 
  </programlisting></para></para>
        </step>

        <step>
          <para>Use redimension_store to populate the target array with data
          from the source array.<para><programlisting>AFL% redimension_store(doseData,pulseFunction) 
  </programlisting><screen>{patientID,elapsedTime,ppm} pulse
{1,0,10} 72
{1,10,434} 75
{1,20,676} 77
{1,25,721} 76
{1,30,744} 77
{1,60,654} 82
{1,120,377} 68
{1,300,89} 70
{2,0,20} 86
{2,10,544} 86
{2,20,689} 87
{2,25,804} 90
{2,30,922} 85
{2,60,1067} 81
{2,120,866} 79
{2,300,645} 79
{3,0,17} 68
{3,10,333} 68
{3,20,444} 65
{3,25,606} 70
{3,30,673} 70
{3,60,624} 77
{3,120,508} 78
{3,300,212} 78
</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
