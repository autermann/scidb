<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry id="minOperator">
  <refnamediv>
    <refname>min</refname>

    <refpurpose><indexterm>
        <primary>min</primary>
      </indexterm>Selects the minimum value for the specified attribute,
    optionally over one or more dimensions.</refpurpose>

    <para><indexterm>
        <primary>deprecated</primary>

        <secondary>min</secondary>
      </indexterm><emphasis role="bold">Deprecated.</emphasis> The
    <code>min</code> operator may be removed in the future. Use the <link linkend="minAggregate">min aggregate</link> instead.</para>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>min(<replaceable>array</replaceable>[,<replaceable>attribute</replaceable><optional>,<replaceable>dimension_1</replaceable>,<replaceable>dimension_2</replaceable>,...</optional>])</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The <code>min</code> operator selects the minimum value from an array
    attribute.</para>
  </refsect1>

  <refsect1>
    <title>Inputs</title>

    <para>The <literal>min</literal> operator takes the following
    arguments:<itemizedlist>
        <listitem>
          <para><emphasis role="bold">array</emphasis>: a source array with
          one or more attributes and one or more dimensions.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">attribute</emphasis>: an optional
          attribute. If no attribute is provided, the first attribute in the
          source array is used.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">dimension_</emphasis><replaceable>n</replaceable>: An
          optional list of dimensions to group by.</para>
        </listitem>
      </itemizedlist></para>
  </refsect1>

  <refsect1>
    <title>Example</title>

    <informalexample>
      <para>This example finds the minimum value of each row of a
      2-dimensional array.</para>

      <procedure>
        <step>
          <para>Create a 1-attribute, 2-dimensional array called
          m3x3:<para><programlisting>AFL% CREATE ARRAY m3x3 &lt;val:double&gt;[i=0:2,3,0,j=0:2,3,0];  </programlisting></para></para>
        </step>

        <step>
          <para>Store random values in m3x3:<para><programlisting>AFL% store(build(m3x3,random()%20+1),m3x3);  </programlisting><screen>[
[(11),(7),(15)],
[(15),(20),(16)],
[(19),(16),(17)]
]</screen></para></para>
        </step>

        <step>
          <para>Select the minimum value of each row of m3x3:<para><programlisting>AFL% aggregate(m3x3,min(val),i);  </programlisting><screen>[(7),(15),(16)]
</screen></para></para>
        </step>
      </procedure>

      <para>Continuing on with this example, we can retrieve the minimum
      value, along with its position in the array, by using the following
      query:<para><programlisting>AFL% project(filter(deldim(cross_join(aggregate(m3x3,min(val) as m),m3x3)),val=m),val);  </programlisting></para></para>

      <para>This query does the following:</para>

      <procedure>
        <step>
          <para>Find the minimum value, and <indexterm>
              <primary>aliases</primary>
            </indexterm>alias it so that we can use it in a cross
          join:<para><programlisting>AFL% aggregate(m3x3,min(val) as m)  </programlisting><screen>{i} m
{0} 7
</screen></para></para>
        </step>

        <step>
          <para>Cross join the minimum value with the original array, so that
          cell {i,j}x becomes {i,i,j}(m=min,x):<para><programlisting>AFL% cross_join(aggregate(m3x3,min(val) as m),m3x3)  </programlisting><screen>{i,i,j} m,val
{0,0,0} 7,11
{0,0,1} 7,7
{0,0,2} 7,15
{0,1,0} 7,15
{0,1,1} 7,20
{0,1,2} 7,16
{0,2,0} 7,19
{0,2,1} 7,16
{0,2,2} 7,17
</screen></para></para>
        </step>

        <step>
          <para>Remove the extra dimension added in the previous
          step:<para><programlisting>AFL% deldim(cross_join(aggregate(m3x3,min(val) as m),m3x3))  </programlisting><screen>{i,j} m,val
{0,0} 7,11
{0,1} 7,7
{0,2} 7,15
{1,0} 7,15
{1,1} 7,20
{1,2} 7,16
{2,0} 7,19
{2,1} 7,16
{2,2} 7,17
</screen></para></para>
        </step>

        <step>
          <para>Filter (select) the cells that have the actual minimum
          value:<para><programlisting>AFL% filter(deldim(cross_join(aggregate(m3x3,min(val) as m),m3x3)), val=m);  </programlisting><screen>[
[(),(7,7),()],
[(),(),()],
[(),(),()]
]</screen></para></para>
        </step>

        <step>
          <para>Of the correct cells, show only <literal>val</literal>, not
          the alias, <literal>m</literal>:<para><programlisting>AFL% project(filter(deldim(cross_join(aggregate(m3x3,min(val) as m),m3x3)), val=m),val);  </programlisting><screen>[
[(),(7),()],
[(),(),()],
[(),(),()]
]</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
