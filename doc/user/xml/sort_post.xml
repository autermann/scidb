<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>sort</refname>

    <refpurpose>Produces a 1-dimensional result array by sorting non-empty
    cells of a source array.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis> sort(<replaceable>array</replaceable>,
      <replaceable>attribute </replaceable><optional><replaceable> asc </replaceable> |  <replaceable>desc </replaceable></optional>
   <optional><replaceable>, attribute </replaceable><optional><replaceable> asc </replaceable> |  <replaceable>desc </replaceable></optional></optional>...
   <optional><replaceable>, chunk_size </replaceable></optional> );</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The sort operator produces a one-dimensional result array, even if
    the source array has multiple dimensions. The result array contains each
    non-empty cell of the source array. Note that the result array does not
    show values of the original dimensions in the source array.</para>

    <para>The result array's sole dimension is unbounded.</para>

    <para>The sort operator can sort by one or more attributes. The operator
    first sorts by the first attribute, then by the second, et cetera. Use the
    optional keyword asc or desc to control the sort order for each attribute,
    ascending or descending. The default is ascending.</para>

    <para>You can control the chunk size of the resulting array with the
    optional chunk_size parameter.</para>

    <para>You can use the sort operator in the FROM clause of an AQL SELECT
    statement, as a stand-alone operator in a AFL statement, or as an operand
    within other SciDB operators.</para>
  </refsect1>

  <refsect1>
    <title>Example</title>

    <informalexample>
      <para>This example first scans a 2-D array, then sorts it by ascending
      country, then sorts it by ascending country and descending time.</para>

      <procedure>
        <step>
          <para>Show the source_array:

<para><para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> champions;  </programlisting><screen>{year,event} person,country,time
{1996,"dash"} "Bailey","Canada",9.84
{1996,"marathon"} "Thugwane","RSA",7956
{1996,"steeplechase"} "Keter","Kenya",487.12
{2000,"dash"} "Greene","USA",9.87
{2000,"marathon"} "Abera","Ethiopia",7811
{2000,"steeplechase"} "Kosgei","Kenya",503.17
{2004,"dash"} "Gatlin","USA",9.85
{2004,"marathon"} "Baldini","Italy",7855
{2004,"steeplechase"} "Kemboi","Kenya",485.81
{2008,"dash"} "Bolt","Jamaica",9.69
{2008,"marathon"} "Wanjiru","Kenya",7596
{2008,"steeplechase"} "Kipruto","Kenya",490.34
</screen></para></para></para>
	  </step>

        <step>
          <para>Sort by country (ascending):
<para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> sort(champions,country);  </programlisting><screen>{n} person,country,time
{0} "Bailey","Canada",9.84
{1} "Abera","Ethiopia",7811
{2} "Baldini","Italy",7855
{3} "Bolt","Jamaica",9.69
{4} "Keter","Kenya",487.12
{5} "Kosgei","Kenya",503.17
{6} "Kemboi","Kenya",485.81
{7} "Wanjiru","Kenya",7596
{8} "Kipruto","Kenya",490.34
{9} "Thugwane","RSA",7956
{10} "Greene","USA",9.87
{11} "Gatlin","USA",9.85
</screen></para></para>
        </step>

        <step>
          <para>Sort by country (ascending), then year (descending), and use a
          chunk size of 100 for the result array:
<para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> sort(winnersAbridged,country, year desc, 100);  </programlisting><screen>{n} country,year,event
{0} "Canada",1996,"dash"
{1} "Ethiopia",2000,"marathon"
{2} "Italy",2004,"marathon"
{3} "Jamaica",2008,"dash"
{4} "Kenya",2008,"steeplechase"
{5} "Kenya",2008,"marathon"
{6} "Kenya",2004,"steeplechase"
{7} "Kenya",2000,"steeplechase"
{8} "Kenya",1996,"steeplechase"
{9} "RSA",1996,"marathon"
{10} "USA",2004,"dash"
{11} "USA",2000,"dash"
</screen>
	  Note that the result includes 12 cells,
          corresponding to the 12 non-empty cells of the source array. The
          sort operator ignores empty cells, of which there are several in the
          winnersAbridged array. (They empty cells correspond to non-Olympic
          years included in the dimension "year.")
	  </para></para>
        </step>
      </procedure>
    </informalexample>

    <informalexample>
      <para>To illustrate how the sort operator handles null values, this
      example first scans an array that includes a null value, then sorts the
      cells in ascending order, then sorts them in descending order.</para>

<para><procedure>
        <step>
          <para>Show the source_array:
	  <para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> numbers;  </programlisting><screen>{i} number
{0} 0
{1} 1
{2} 2
{3} null
{4} 4
</screen></para></para>
        </step>

        <step>
          <para>Sort by number (ascending):
<para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> sort(numbers, number asc);  </programlisting><screen>{n} number
{0} null
{1} 0
{2} 1
{3} 2
{4} 4
</screen></para></para>
        </step>

        <step>
          <para>Sort by number (descending):
<para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> sort(numbers, number desc);  </programlisting><screen>{n} number
{0} 4
{1} 2
{2} 1
{3} 0
{4} null
</screen></para></para>
        </step>
      </procedure>
    </para></informalexample>
  </refsect1>
</refentry>
