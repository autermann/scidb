<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>merge</refname>

    <refpurpose>Produces a result array by merging the data from two other
    arrays.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>merge(<replaceable>left_array</replaceable>,<replaceable>right_array</replaceable>);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The left_array and target_array must be compatible. For the merge
    operator, compatible means the following:</para>

    <itemizedlist>
      <listitem>
        <para>The arrays must have the same number of attributes.</para>

        <para>(Note: To the merge operator, attribute names are immaterial;
        the attribute names in the left_array and right_array need not match.
        Rather, the first attribute of the left_array corresponds to the first
        attribute of the right_array; the second to the second, etc.)</para>
      </listitem>

      <listitem>
        <para>In the ordering of attributes in each array, each pair of
        corresponding attributes must have the same datatype and the same
        null/not null setting.</para>
      </listitem>

      <listitem>
        <para>The left_array and right_array must have the same number of
        dimensions.</para>

        <para>(Here too, the names are immaterial. Source dimensions and
        target dimensions correspond based on the order of dimensions.)</para>
      </listitem>

      <listitem>
        <para>In the ordering of dimensions in each array, each pair of
        corresponding dimensions must have the same chunk size, chunk overlap,
        and dimension starting index.</para>
      </listitem>
    </itemizedlist>

    <para>Merge combines elements from the input array the following way: for
    each cell in the two inputs, if the cell of first (left) array is not
    empty, then the attributes from that cell are selected and placed in the
    output. If the cell in the first array is marked as empty, then the
    attributes of the corresponding cell in the second array are taken. If the
    cell is empty in both input arrays, the output's cell is set to
    empty.</para>

    <para>If the dimensions are not the same size, merge will return an output
    array the same size as the larger input array.</para>
  </refsect1>

  <refsect1>
    <title>Example</title>

    <informalexample>
      <para>This example merges two sparse arrays.</para>

      <procedure>
        <step>
          <para>Create a sparse array left_array and store value 1 in the
          first row:<programlisting>CREATE ARRAY left_array &lt;val:double&gt;[i=0:2,3,0,j=0:5,3,0];
store(build_sparse(left_array,1,i=0),left_array);</programlisting>This query
          outputs:<programlisting>[[{0,0}(1),{0,1}(1),{0,2}(1)]];
[[{0,3}(1),{0,4}(1),{0,5}(1)]]</programlisting></para>
        </step>

        <step>
          <para>Create a sparse identity matrix called
          right_array<programlisting>CREATE ARRAY right_array &lt;val:double&gt;[i=0:2,3,0,j=0:2,3,0];
store(build_sparse(right_array,1,i=j),right_array);</programlisting>This query
          outputs:<screen>[[{0,0}(1),{1,1}(1),{2,2}(1)]]</screen></para>
        </step>

        <step>
          <para>Merge left_array and right_array:<programlisting>merge(left_array,right_array);</programlisting>This
          query outputs:<screen>[[{0,0}(1),{0,1}(1),{0,2}(1),{1,1}(1),{2,2}(1)]];
[[{0,3}(1),{0,4}(1),{0,5}(1)]]</screen></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>

  <refsect1>
    <title>Limitations</title>

    <itemizedlist>
      <listitem>
        <para>In both left_array and right_array, each dimension must have
        datatype int64.</para>
      </listitem>
    </itemizedlist>
  </refsect1>
</refentry>
