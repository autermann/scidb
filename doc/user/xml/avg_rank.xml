<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<refentry>
  <refnamediv>
    <refname>avg_rank</refname>
    <refpurpose>Rank elements of a matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis><command>SELECT</command> * <command>FROM</command>
     avg_rank (<replaceable>array</replaceable>, [<replaceable>attribute</replaceable> [, <replaceable>dimension_1</replaceable> [, <replaceable>dimension_2</replaceable>... ]]])</synopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Summary</title>
    <para>The <code>avg_rank</code> operator ranks array elements and calculates average rank   as the average of the upper bound (UB) and lower bound (LB) rankings. The LB ranking of A, same as returned by rank, is the number of elements less than A, plus 1. The UB ranking of A is the number of elements less than or equal to A, plus 1. avg_rank returns the average of the UB and LB ranking for each element. If no duplicates are present, then for each element the UB rank is the same as the LB rank and avg_rank returns exactly the same result as rank. </para>
  </refsect1>
  <refsect1>
    <title>Example</title>
    <informalexample>
      <para>This example calculates ranks along the columns of a matrix where there are ties within columns.</para>
      <procedure>
        <step>
          <para>Create a 4<symbol role="symbolfont">&times;</symbol>4 array called rank:<programlisting><command>CREATE ARRAY</command> rank_array &lt;val:double&gt;[i=0:3,4,0,j=0:3,4,0];</programlisting></para>
        </step>
        <step>
          <para>Put random values of 0&ndash;6 into rank:<programlisting><command>SELECT</command> * <command>FROM</command> store(build(rank_array,random()%7/1.0),rank_array);</programlisting><screen>[
[(6),(2),(0),(4)],
[(6),(5),(3),(5)],
[(6),(6),(6),(4)],
[(1),(4),(4),(1)]
]</screen></para>
        </step>
        <step>
          <para>Rank the elements in rank_array by dimension i:<programlisting><command>SELECT</command> * <command>FROM</command> avg_rank(rank_array,val,i);</programlisting><screen>[
[(6,4),(2,2),(0,1),(4,3)],
[(6,4),(5,2.5),(3,1),(5,2.5)],
[(6,3),(6,3),(6,3),(4,1)],
[(1,1.5),(4,3.5),(4,3.5),(1,1.5)]
]</screen></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
