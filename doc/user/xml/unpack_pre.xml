<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>unpack</refname>

    <refpurpose>Produces a one-dimensional result array from the data in a
    multi-dimensional source array. Note that the unpack operator excludes all
    empty cells from the result array.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>unpack(<replaceable>source_array</replaceable>,<replaceable>dimension_name</replaceable>[,<replaceable>chunk_size</replaceable>]);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The unpack operator unpacks a multidimensional array into a
    single-dimensional result array creating new attributes to represent
    source array dimension values. The result array has a single zero-based
    dimension and attributes combining variables of the input array. The name
    for the new single dimension is passed to the operator as the second
    argument.</para>

    <para>You can control the chunk size of the resulting array with the
    optional chunk_size parameter. The default chunk size is 1 million.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>This example takes 2-dimensional, 1-attribute array and outputs a
      1-dimensional, 3-attribute array.</para>

      <procedure>
        <step>
          <para>Create a 1-attribute, 2-dimensional array called
          m3x3:<programlisting language="test">--aql CREATE ARRAY m3x3 &lt;val:double&gt;[i=0:2,3,0,j=0:2,3,0]; --show-output=no</programlisting></para>
        </step>

        <step>
          <para>Store values of 0–8 in m3x3:<programlisting language="test">--afl store(build(m3x3,i*3+j),m3x3); --output-format=auto --chunkify=yes</programlisting></para>
        </step>

        <step>
          <para>Create a new attribute called val2 containing values 100–108
          and store the resulting array as m3x3_2attr:<programlisting
          language="test">--afl store(apply(m3x3,val2,val+100),m3x3_2attr); --output-format=auto --chunkify=yes</programlisting></para>
        </step>

        <step>
          <para>Unpack m3x3_2attr into a 1-dimensional array. <programlisting
          language="test">--afl unpack(m3x3_2attr, x);</programlisting> The
          first two values in each cell are the dimensions, and the second two
          are the attribute values.</para>
        </step>
      </procedure>
    </informalexample>

    <informalexample>
      <para>This example illustrates how empty cells are removed during the
      unpack process.</para>

      <procedure>
        <step>
          <para>We use a previously created 3x3 array, A, where row 1 has only
          empty cells, row 2 has only null values, and row 3 has only non-null
          values. <programlisting lang="test" language="test">--aql create array aFlat 
      &lt;row:int64, col:int64, value:string null&gt; 
      [csvRow=0:5,6,0]
 --show-query=no
 --show-output=no

--shell --command=csv2scidb -s 1 -p NNs 
            &lt; ../examples/aInsert.csv &gt; 
              ../examples/aInsert.scidb
 --show-query=no
 --show-output=no

--aql load aFlat 
      from '../examples/aInsert.scidb'
 --show-query=no
 --show-output=no

--aql create array A 
      &lt;value:string null&gt; 
      [row=1:3,3,0, col=1:3,3,0]
 --show-query=no
 --show-output=no

--afl redimension_store(aFlat,A)
 --show-query=no
 --show-output=no

--aql select * from A
 --output-format=dense
 --chunkify=yes
 --show-query=no
 --show-output=yes</programlisting></para>
        </step>

        <step>
          <para>Unpack array A. <programlisting language="test">--afl unpack(A, x);</programlisting>
          Note that <code>unpack</code> has excluded the empty cells from the
          result array.</para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
