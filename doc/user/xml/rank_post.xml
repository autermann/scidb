<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv id="rankOperator">
    <refname>rank</refname>

    <refpurpose><indexterm>
        <primary>ranking methods</primary>

        <secondary>rank</secondary>
      </indexterm><indexterm>
        <primary>rank</primary>
      </indexterm>Rank array elements</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>rank(<replaceable>array</replaceable>, [<replaceable>attribute</replaceable> [, <replaceable>dimension1</replaceable> [, <replaceable>dimension2</replaceable>... ]]
   [<replaceable>attribute2</replaceable> [, <replaceable>dimension</replaceable>...]]])</synopsis>

    <synopsis>rank(<replaceable>array</replaceable><optional>,<replaceable>attribute1</replaceable>,<replaceable>attribute2,...</replaceable></optional>
   <optional>,<replaceable>dimension1</replaceable>,<replaceable>dimension2</replaceable>,...</optional>);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>Ranking array elements sorts them and assigns an ordinal
    rank.</para>

    <para>The <literal>avg_rank</literal> operator is equivalent to
    <literal>rank</literal> except for handling ties. The
    <literal>avg_rank</literal> operator averages the rank for the tied
    values. For details, see the <link linkend="avgRank">avg_rank</link>
    reference.</para>
  </refsect1>

  <refsect1>
    <title>Example</title>

    <informalexample>
      <para>This example ranks a 4<symbol role="symbolfont">×</symbol>4 array
      by dimension.</para>

      <procedure>
        <step>
          <para>Create a 4<symbol role="symbolfont">×</symbol>4 array called
          rank_array:<para><programlisting>AFL% CREATE ARRAY rank_array &lt;val:double&gt;[i=0:3,4,0,j=0:3,4,0];  </programlisting></para></para>
        </step>

        <step>
          <para>Put random values of 0–6 into rank_array:<para><programlisting>AFL% store(build(rank_array,random()%7/1.0),rank_array);  </programlisting><screen>[
[(4),(2),(5),(1)],
[(2),(3),(3),(4)],
[(1),(1),(0),(1)],
[(2),(5),(6),(1)]
]</screen></para></para>
        </step>

        <step>
          <para>Rank the elements in rank_array by dimension i:<para><programlisting>AFL% rank(rank_array,val,i);  </programlisting><screen>[
[(4,3),(2,2),(5,4),(1,1)],
[(2,1),(3,2),(3,2),(4,4)],
[(1,2),(1,2),(0,1),(1,2)],
[(2,2),(5,3),(6,4),(1,1)]
]</screen></para></para>
        </step>

        <step>
          <para>Rank the elements in rank_array by dimension j:<para><programlisting>AFL% rank(rank_array,val,j);  </programlisting><screen>[
[(4,4),(2,2),(5,3),(1,1)],
[(2,2),(3,3),(3,2),(4,4)],
[(1,1),(1,1),(0,1),(1,1)],
[(2,2),(5,4),(6,4),(1,1)]
]</screen></para></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
