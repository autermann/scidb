<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>cast</refname>

    <refpurpose>Produces a result array with the same dimensions, attributes,
    and cells as a source array -- but with other differences, which can
    include different names for its dimensions or attributes, different
    nulls-allowed status for an attribute, and different datatypes for its
    dimensions.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>cast(<replaceable>array</replaceable>,<replaceable>template_array</replaceable>|<replaceable>schema_definition</replaceable>);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The cast operator has three primary uses:</para>

    <itemizedlist>
      <listitem>
        <para>To change names of attributes or dimensions</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>To change a non-integer dimension to an integer dimension</para>
      </listitem>

      <listitem>
        <para>To change a nulls-disallowed attribute to a nulls-allowed
        attribute</para>
      </listitem>
    </itemizedlist>

    <para>A single cast invocation can be used to make all of these changes at
    once. The input array and template arrays should have the same numbers and
    types of attributes.</para>

    <para>The cells of the result array have the same attribute values as the
    corresponding cells of the source array.</para>

    <para>If you use cast to change a non-integer dimension to an integer
    dimension, the new dimension will have one value for every value in the
    source dimension. The values will be consecutive integers in the range you
    supply in the schema_definition parameter or in the schema definition of
    the template array.</para>

    <para>You can use the cast operator in the FROM clause of an AQL SELECT
    statement, as a stand-alone operator in a AFL statement, or as an operand
    within other SciDB operators.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>This example shows the schema of an array, combines the recast and
      store operators to change some characteristics of the array, and shows
      the schema of the new array.</para>

      <procedure>
        <step>
          <para>Show the schema of an existing array:<programlisting language='test'>
--afl create array winnersFewFlat &lt;event:string,year:int64,person:string,country:string,time:double&gt; [i=0:*,12,0] --show-query=no --show-output=no
--shell --command=csv2scidb -s 1 -p SNSSN &lt; ../examples/winnersFew.csv &gt; ../examples/winnersFew.scidb --show-query=no --show-output=no
--aql load winnersFewFlat from '../examples/winnersFew.scidb' --show-query=no --show-output=no
--afl create array champions &lt;person:string,country:string,time:double&gt; [year=1996:2008,1,0, event(string)=3,1,0] --show-query=no --show-output=no
--afl redimension_store(winnersFewFlat,champions) --show-query=no --show-output=no
--afl store(project(champions,time),winningTime) --show-query=no --show-output=no
--schema winningTime</programlisting></para>
        </step>

        <step>
          <para>Use the cast operator to produce a result array similar to the
          existing array, but with these changes:</para>

          <itemizedlist>
            <listitem>
              <para>The attribute in the new array allows null values.</para>
            </listitem>

            <listitem>
              <para>The attribute in the new array is called
              "time_in_seconds."</para>
            </listitem>

            <listitem>
              <para>The string dimension "event" of the source array has been
              replaced with an int64 dimension "eventCode" in the new
              array.</para>
            </listitem>
          </itemizedlist>

          <para>In this example, the cast operator appears as an operand of
          the store operator, yielding a named array
          "winningTimeRecast":<programlisting language='test'>--afl store
   (
   cast
      (
      winningTime,
         &lt;time_in_seconds:double null&gt; 
         [year=1996:2008,1,0, eventCode=0:2,1,0]
       ),
       winningTimeRecast
   );</programlisting></para>
        </step>

        <step>
          <para>Show the schema of the new array:<programlisting language='test'>--schema winningTimeRecast</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
