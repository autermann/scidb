<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<refentry>
  <refnamediv>
    <refname>allversions</refname>
    <refpurpose>Create a single array containing all versions of an existing array</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis><command>SELECT</command> * <command>FROM</command> allversions(<replaceable>named_array</replaceable>);</synopsis>
    <synopsis>allversions(<replaceable>named_array</replaceable>)</synopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Summary</title>
    <para>The allversions operator takes all versions of an array and combines them into one array. The resulting array has a dimension called VersionNo that has indices 1&ndash;<replaceable>final_array_version</replaceable> appended to the left-most dimension. The argument <replaceable>named_array</replaceable> must be an array that was previously created and stored in the SciDB namespace.
</para>
  </refsect1>
  <refsect1>
    <title>Example</title>
    <informalexample>
      <para>This example creates a 3<symbol role="symbolfont">&times;</symbol>3 matrix, updates it, and then uses allversions to combine all previous versions of the array.</para>
      <procedure>
        <step>
          <para>Create an array m3x3:
 <programlisting>CREATE ARRAY m3x3 &lt;val:double&gt;[i=0:2,3,0,j=0:2,3,0];</programlisting></para>
        </step>
        <step>
          <para>Put zeros into m3x3:<programlisting>store(build(m3x3,0),m3x3);</programlisting></para>
        </step>
        <step>
          <para>Update m3x3 with 100 in every cell:<programlisting>store(build(m3x3,100),m3x3);</programlisting></para>
        </step>
        <step>
          <para>Update m3x3 with 200 in every cell:<programlisting>store(build(m3x3,200),m3x3);</programlisting></para>
        </step>
        <step>
          <para>Use allversions in a store statement to store an
 array containing all three versions of
 m3x3:<programlisting>store(allversions(m3x3),m3x3_versions);</programlisting>
 This query outputs:
 <screen>[[
[(0),(0),(0)],
[(0),(0),(0)],
[(0),(0),(0)]
],[
[(100),(100),(100)],
[(100),(100),(100)],
[(100),(100),(100)]
],[
[(200),(200),(200)],
[(200),(200),(200)],
[(200),(200),(200)]
]]
</screen>
The array m3x3_versions has the following schema:
<programlisting>show(m3x3_versions);</programlisting>
<screen>[(&quot;m3x3_versions&lt;val:double&gt; 
[VersionNo=1:3,1,0,i=0:2,3,0,j=0:2,3,0]&quot;)]</screen></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
