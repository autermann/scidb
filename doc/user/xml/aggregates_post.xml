<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd">
<chapter>
  <title>Performing Simple Analytics</title>

  <para><indexterm>
      <primary>aggregates</primary>
    </indexterm>This chapter provides an overview of the basic analytic
  capabilities of SciDB. SciDB provides commands to group data from an array
  and calculate summaries over those groups. These commands are called
  <emphasis>aggregates</emphasis>.</para>

  <para>In addition, SciDB also provides scalable operators to calculate
  <emphasis>order statistics</emphasis> of array data -- these include
  <emphasis>rank</emphasis>, <emphasis>avg_rank</emphasis>, and
  <emphasis>quantile</emphasis>, as well as the operator
  <emphasis>sort</emphasis> which rearranges array data and returns a vector
  of sorted items.</para>

  <section id="aggregateList">
    <title>Aggregates</title>

    <para><indexterm>
        <primary>aggregates</primary>
      </indexterm>SciDB offers the following aggregate methods that calculate
    summaries over groups of values in an array.</para>

    <informaltable frame="none">
      <tgroup cols="2">
        <colspec colname="c1" colwidth="20*"/>

        <colspec colname="c2" colwidth="60*"/>

        <tbody>
          <row>
            <?dbfo keep-together="auto" ?>

            <entry><para><emphasis role="bold">Aggregate</emphasis></para></entry>

            <entry><para><emphasis role="bold">Definition</emphasis></para></entry>
          </row>

          <row>
            <entry><para><code>approxdc</code></para></entry>

            <entry><para>Approximate count of distinct values</para></entry>
          </row>

          <row>
            <entry><para><code>avg</code></para></entry>

            <entry><para>Average value</para></entry>
          </row>

          <row>
            <entry><para><code>count</code></para></entry>

            <entry><para>Number of nonempty elements (array count) and
            non-null elements <?linebreak ?>(attribute count).</para></entry>
          </row>

          <row>
            <entry><para><code>max</code></para></entry>

            <entry><para>Largest value</para></entry>
          </row>

          <row>
            <entry><para><code>min</code></para></entry>

            <entry><para>Smallest value</para></entry>
          </row>

          <row>
            <entry><para><code>sum</code></para></entry>

            <entry><para>Sum of all elements</para></entry>
          </row>

          <row>
            <entry><para><code>stdev</code></para></entry>

            <entry><para>Standard deviation</para></entry>
          </row>

          <row>
            <entry><para><code>var</code></para></entry>

            <entry><para>Variance</para></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para><indexterm>
        <primary>context, aggregates</primary>
      </indexterm>These aggregates appear within the context of one of the
    following SciDB operators or query types. We classify these aggregating
    operators based on how they divide data within the input array into
    subgroups.</para>

    <itemizedlist>
      <listitem>
        <para>A <emphasis>Grand aggregate</emphasis> computes an aggregate
        over an entire array or an arbitrary subset of an array specified via
        filtering or other data preparation.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>Group-by aggregate</emphasis> computes summaries by
        grouping array data by dimension value.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>Grid aggregate</emphasis> computes summaries for
        non-overlapping grids of the input array. Hence each group or grid is
        a multidimensional subarray of the input array.</para>
      </listitem>

      <listitem>
        <para>A <emphasis>Window aggregate</emphasis> computes summaries over
        a moving window in an array. SciDB supports two types of window
        operators: fixed boundary windows and variable boundary windows.
        Variable boundary windows are identified by the VARIABLE WINDOW clause
        in AQL and their size depends on the number of nonempty elements.
        These window aggregates are described in depth later in this
        chapter.</para>
      </listitem>
    </itemizedlist>

    <para>We describe these different types of array aggregates in more detail
    in the following sections, as well as in <xref linkend="scidbAggregateReference"/>.</para>

    <para>Most examples in this chapter use the following example arrays:
    <code>m4x4</code> and <code>m4x4_2attr</code>, which have the following
    schemas and contain the following values:<para><screen><command>m4x4</command>

&lt; attr1:double &gt;

[x=0:3,4,0,
y=0:3,4,0]</screen><programlisting>AFL% scan(m4x4);  </programlisting><screen>[
[(0),(1),(2),(3)],
[(4),(5),(6),(7)],
[(8),(9),(10),(11)],
[(12),(13),(14),(15)]
]</screen><para><screen><command>m4x4_2attr</command>

&lt; attr1:double,
attr2:double &gt;

[x=0:3,4,0,
y=0:3,4,0]</screen><programlisting>AFL% scan(m4x4_2attr);  </programlisting><screen>[
[(0,0),(1,2),(2,4),(3,6)],
[(4,8),(5,10),(6,12),(7,14)],
[(8,16),(9,18),(10,20),(11,22)],
[(12,24),(13,26),(14,28),(15,30)]
]</screen></para></para></para>

    <section>
      <title>Grand Aggregates</title>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>grand</secondary>
        </indexterm><indexterm>
          <primary>grand aggregates</primary>
        </indexterm><indexterm>
          <primary>AQL</primary>

          <secondary>where</secondary>
        </indexterm>A grand aggregate in SciDB calculates aggregates or
      summaries of attributes across an entire array or across an arbitrary
      subset of an array you specify via filtering or other preparation with
      array operators.. You calculate grand aggregates with the AQL<code>
      <command>SELECT</command> </code>statement conforming to this syntax:
      <programlisting>AQL% <command>SELECT</command> <replaceable>aggregate</replaceable><replaceable>(attribute</replaceable>)[,<replaceable>aggregate</replaceable><replaceable>(attribute</replaceable>)]...
[<command> INTO</command> <replaceable>dst-array</replaceable>]
<command>FROM</command> <replaceable>src-array</replaceable> | <replaceable>array-expression</replaceable> 
[<command>WHERE</command> <replaceable>where-expression</replaceable>]
</programlisting></para>

      <para>The output is a SciDB array with one attribute named for each
      summary type in the query, whose dimensions are determined by the size
      and shape of the result.</para>

      <para>For example, to select the maximum and the minimum values of the
      attribute <code>attr1</code> of the array <code>m4x4</code>:
      <para><programlisting>AQL% <command>SELECT</command> max(attr1),min(attr1) <command>FROM</command> m4x4;   </programlisting><screen>[(15,0)]
</screen> You can store the output of a query into a destination
      array, <code>m4x4_max_min</code> with the <code><command>INTO</command>
      </code> clause: <para><programlisting>AQL% <command>SELECT</command> max(attr1),min(attr1) <command>INTO</command> m4x4_max_min <command>FROM</command> m4x4;  </programlisting><screen>[(15,0)]
</screen> The destination array <code>m4x4_max_min</code> has the
      following schema: <para><screen><command>not empty m4x4_max_min</command>

&lt; max:double NULL DEFAULT null,
min_1:double NULL DEFAULT null &gt;

[i=0:0,1,0]</screen></para></para></para></para>

      <para>To select the maximum value from the attribute attr1 of
      <code>m4x4_2attr</code> and the minimum value from the attribute
      <code>attr2</code> of <code>m4x4_2attr</code>: <para><programlisting>AQL% <command>SELECT</command> max(attr2), min(attr2) <command>FROM</command> m4x4_2attr;  </programlisting><screen>[(30,0)]
</screen></para></para>

      <note>
        <para>In the special case of a one-attribute array, you may omit the
        attribute name. For example, to select the maximum value from the
        attribute <code>attr1</code> of the array <code>m4x4</code>, use the
        AQL <code> <command>SELECT</command> </code> statement:
        <para><programlisting>AQL% <command>SELECT</command> max(m4x4);  </programlisting><screen>{i} attr1_max
{0} 15
</screen></para></para>
      </note>

      <para>The AFL <code>aggregate</code> operator also computes grand
      aggregates. To select the maximum value from the attribute attr1 of
      <code>m4x4_2attr</code> and the minimum value from the attribute
      <code>attr2</code> of <code>m4x4_2attr</code>: <para><programlisting>AFL% aggregate(m4x4_2attr, max(attr2),min(attr1));  </programlisting><screen>[(30,0)]
</screen></para></para>

      <para>In most cases, SciDB aggregates exclude null-valued data. For
      example, consider the following array <code>m4x4_null</code>:
      <para><screen>[
[(null),(null),(null),(null)],
[(null),(null),(null),(null)],
[(0),(0),(0),(0)],
[(null),(null),(null),(null)]
]</screen>The commands <code>count(attr1)</code> and
      <code>count(*)</code> return different results because the first ignores
      null values, while the second does not: <para><programlisting>AQL% <command>SELECT</command> count(attr1) <command>AS</command> a, count(*) <command>AS</command> b <command>FROM</command> m4x4_null; 
</programlisting><screen>{i} a,b
{0} 4,16
</screen></para></para></para>
    </section>

    <section>
      <title>Group-By Aggregates</title>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>group-by</secondary>
        </indexterm><indexterm>
          <primary>group-by aggregates</primary>
        </indexterm><indexterm>
          <primary>AQL</primary>

          <secondary>where</secondary>
        </indexterm>Group-by aggregates group array data by array dimensions
      and summarize the data in those groups.</para>

      <para>AQL <code> <command>GROUP BY</command> </code> aggregates take a
      list of dimensions as the grouping criteria and compute the aggregate
      function for each group. The result is an array containing only the
      dimensions specified in the <code> <command>GROUP BY</command> </code>
      clause and a single attribute per specified aggregate call. The syntax
      of the <code> <command>SELECT</command> </code> statement for a group-by
      aggregate is:<programlisting><command>SELECT</command> <replaceable>expression1</replaceable> [,<replaceable>expression2</replaceable>]... 
  [ <command>INTO</command> <replaceable>dst-array</replaceable> ]
  <command>FROM</command> <replaceable>src-array</replaceable> | <replaceable>array-expression</replaceable>
  [ <command>WHERE</command> <replaceable>where-expression</replaceable> ]
  <command>GROUP BY</command> <replaceable>dimension1</replaceable> [,<replaceable>dimension2</replaceable>]... ;</programlisting></para>

      <para>AQL expressions in the SELECT list are expressions containing
      attributes or dimensions of the array (also referred to as variables of
      the array), scalar functions and aggregates. For example, this query
      selects the largest value of <code>attr1</code> from each row of
      <code>m4x4</code>: <para><programlisting>AQL% <command>SELECT</command> max(attr1) <command>FROM</command> m4x4 <command>GROUP BY</command> x;
</programlisting><screen>{x} max
{0} 3
{1} 7
{2} 11
{3} 15
</screen> The output has the following schema: <para><screen>
&lt; max:double NULL DEFAULT null &gt;

[x=0:3,4,0]</screen></para></para></para>

      <note>
        <para>You will notice that the new attributes generated by applying
        the aggregates have special suffixes, for example, <code>min_1</code>
        and <code>max_1</code> . This is done when calculating aggregates to
        keep attribute names unique especially during intermediate stages of
        array processing.</para>
      </note>

      <para>This query selects the maximum value of <code>attr1</code> from
      each column of array <code>m4x4</code> <para><programlisting>AQL% <command>SELECT</command> max(attr1) <command>FROM</command> m4x4 <command>GROUP BY</command> y;
</programlisting><screen>{y} max
{0} 12
{1} 13
{2} 14
{3} 15
</screen></para></para>

      <para>The AFL <code>aggregate</code> operator takes dimension arguments
      to support group-by functionality. This query selects the largest value
      from each column <code>y</code> from the array <code>m4x4</code> using
      AFL: <para><programlisting>AFL% aggregate(m4x4, max(attr1), y); 
</programlisting><screen>{y} attr1_max
{0} 12
{1} 13
{2} 14
{3} 15
</screen></para></para>
    </section>

    <section>
      <title>Grid Aggregates</title>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>grid</secondary>
        </indexterm><indexterm>
          <primary>grid aggregates</primary>
        </indexterm><indexterm>
          <primary>AQL</primary>

          <secondary>where</secondary>
        </indexterm>A grid aggregate selects non-overlapping subarrays from an
      existing array and calculates an aggregate of each subarray. For
      example, if you have a 4x4 array, you can create 4 non-overlapping 2x2
      regions and calculate an aggregate for those regions. The array
      <code>m4x4</code> would be divided into 2x2 grids as
      follows:<informalfigure>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../graphics/grid_aggregates.png" scale="50"/>
            </imageobject>
          </mediaobject>
        </informalfigure>The syntax of a grid aggregate statement is:
      <programlisting>AQL% <command>SELECT</command> <replaceable>aggregate(attribute</replaceable>) [,<replaceable>aggregate(attribute</replaceable>)] ...
<command> INTO</command> <replaceable>dst-array</replaceable>
<command> FROM</command> <replaceable>src-array</replaceable> | <replaceable>array-expression</replaceable>
<command> WHERE</command> <replaceable>where-expression</replaceable>
<command> REGRID AS </command>
        (<command> PARTITION BY </command> <replaceable>dimension1</replaceable> <replaceable>dimension1-size
         </replaceable> [, <replaceable>dimension2</replaceable> <replaceable>dimension2-size</replaceable>]... ) ;
</programlisting></para>

      <para>For example, this statement finds the maximum and minimum values
      for each of the four grids in the previous figure: <para><programlisting>AQL% 
<command>SELECT</command> max(attr1), min(attr1) 
<command>FROM</command> m4x4 
<command>REGRID</command> <command>AS</command> (<command>PARTITION BY</command> x 2, y 2);  </programlisting><screen>[
[(5,0),(7,2)],
[(13,8),(15,10)]
]</screen>This output has schema: <para><screen>
&lt; max:double NULL DEFAULT null,
min_1:double NULL DEFAULT null &gt;

[x=0:1,4,0,
y=0:1,4,0]</screen></para></para></para>

      <para>In AFL, you can use the <code>regrid</code> operator to get the
      same result: <para><screen>[
[(5,0),(7,2)],
[(13,8),(15,10)]
]</screen></para></para>
    </section>

    <section>
      <title>Window Aggregates</title>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>window</secondary>
        </indexterm><indexterm>
          <primary>window aggregates</primary>
        </indexterm><indexterm>
          <primary>AQL</primary>

          <secondary>where</secondary>
        </indexterm><indexterm>
          <primary>data windows</primary>
        </indexterm>Window aggregates allow you to specify groups with a
      moving window. The window is defined by a size in each dimension. The
      window centroid starts at the first array element. The moving window
      starts at the first element of the array and moves in stride-major order
      from the lowest to highest value in each dimension. The AQL syntax for
      window aggregates is: <programlisting>
AQL% <command>SELECT</command> <replaceable>aggregate</replaceable> <replaceable>(attribute</replaceable>)[, <replaceable>aggregate</replaceable> <replaceable>(attribute</replaceable>)]...
    <command>INTO</command> <replaceable>dst-array</replaceable>
    <command>FROM</command> <replaceable>src-array</replaceable> | <replaceable>array-expression</replaceable> 
    <command>WHERE</command> <replaceable>where-expression</replaceable> 
    <command>FIXED</command> | <command>VARIABLE</command> <command>WINDOW AS </command>
    (<command>PARTITION BY</command> <replaceable>dimension1</replaceable> <replaceable>dim1-low</replaceable> <command>PRECEDING</command> <command>AND</command> <replaceable>dim1-high</replaceable> <command>FOLLOWING</command> 
               [, <replaceable>dimension2</replaceable> <replaceable>dim2-low</replaceable> <command>PRECEDING</command> <command> AND</command> <replaceable>dim2-high</replaceable> <command>FOLLOWING</command> ]... );
</programlisting></para>

      <para>SciDB supports two types of window aggregates, identified by the
      keywords FIXED WINDOW and VARIABLE WINDOW as shown in the synopsis
      above. Both types of window aggregates calculate an aggregate over a
      window surrounding each array element. A fixed boundary window aggregate
      uses an exact size for each of its dimensions. Each dimension specifies
      both the number of preceding values and the number of following values
      relative to the center. Window dimension sizes include empty cells.
      SciDB supports multi-dimensional windows, hence, to calculate a fixed
      window query on a 3-dimensional array, one must define a window with 3
      dimensions.</para>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>window</secondary>

          <tertiary>fixed</tertiary>
        </indexterm>For example, you can use fixed window to calculate a
      running sum for a 3x3 window on array <code>m4x4</code>.</para>

      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../graphics/window_aggregates.png" scale="60"/>
          </imageobject>
        </mediaobject>
      </informalfigure>

      <para><indexterm>
          <primary>AQL</primary>

          <secondary>fixed window</secondary>
        </indexterm>In AQL, you would use this statement: <para><programlisting>AQL% 
    <command>SELECT</command> sum(attr1) 
    <command>FROM</command> m4x4 
    <command>FIXED WINDOW</command> <command>AS</command> 
    (<command>PARTITION BY</command> x 1 <command>PRECEDING</command> <command>AND</command> 1 <command>FOLLOWING</command>, 
    y 1 <command>PRECEDING</command> <command>AND</command> 1 <command>FOLLOWING</command>);   </programlisting><screen>[
[(10),(18),(24),(18)],
[(27),(45),(54),(39)],
[(51),(81),(90),(63)],
[(42),(66),(72),(50)]
]</screen> The output has the following schema: <para><screen>
&lt; sum:double NULL DEFAULT null &gt;

[x=0:3,4,0,
y=0:3,4,0]</screen></para></para></para>

      <para>In AFL, you can use the <code>window</code> operator to achieve
      the same result: <para><programlisting>AFL% window (m4x4,1,1,1,1,sum(attr1));  </programlisting><screen>[
[(10),(18),(24),(18)],
[(27),(45),(54),(39)],
[(51),(81),(90),(63)],
[(42),(66),(72),(50)]
]</screen></para></para>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>window</secondary>

          <tertiary>variable</tertiary>
        </indexterm>In contrast, the boundary of a variable window can vary
      since the window size includes only nonempty values. Both the number of
      preceding (nonempty) values and following (nonempty) values relative to
      the center must appear in the query. SciDB supports only a
      one-dimensional variable window operator, and this dimension appears in
      the query. This special dimension defines the "axis" of this type of
      window along which the window boundary is calculated and along which the
      window center moves during the query.</para>

      <para>One can think of the (one dimensional) variable window aggregate
      to be a special case where all the unspecified dimensions have unit
      length. The following examples show how to use variable windows.</para>

      <para>Consider the array <code>m4x4_empty</code>:</para>

      <para><programlisting>AFL% CREATE ARRAY m4x4_empty&lt;val: double, label: string NULL&gt;[i=0:3,4,0, j=0:3,4,0];  </programlisting><programlisting>AFL% scan(m4x4_empty);  </programlisting><screen>[
[(0,null),(),(),()],
[(4,null),(),(6,null),(7,null)],
[(8,null),(),(),()],
[(),(13,null),(14,null),()]
]</screen><para>The following variable window aggregate query along dimension
      <code>i</code> is shown here. This query uses a window with one value
      preceding and one value following the window center after excluding
      empty cells.</para>

      <para><programlisting>AQL% 
<command>SELECT</command> sum(val)
<command>FROM</command> m4x4_empty
<command>VARIABLE WINDOW</command> <command>AS</command> 
(<command>PARTITION BY</command> 
i 1 <command>PRECEDING</command> <command>AND</command> 1 <command>FOLLOWING</command>);  </programlisting><screen>{i,j} sum
{0,0} 4
{1,0} 12
{1,2} 20
{1,3} 7
{2,0} 12
{3,1} 13
{3,2} 20
</screen><para>In AFL, you can specify the same query as follows:</para>

      <para><programlisting>AFL% variable_window(m4x4_empty, i, 1, 1, sum(val));  </programlisting><screen>[
[(4),(),(),()],
[(12),(),(20),(7)],
[(12),(),(),()],
[(),(13),(20),()]
]</screen></para></para></para></section>

    <section>
      <title>Aggregation During Redimension</title>

      <para><indexterm>
          <primary>aggregates</primary>

          <secondary>in-line</secondary>
        </indexterm><indexterm>
          <primary>redimension</primary>

          <secondary>aggregation</secondary>
        </indexterm>The preceding sections of this chapter describe those
      features of SciDB that were designed exclusively to calculate
      aggregates. You can also calculate aggregates "in-line" as part of other
      data management or rearrangement steps: the redimension and
      redimension_store operators support this type of usage. Those operators
      are used to transform a source array into a result array with different
      schema or dimensions. In those cases, aggregates can be useful in
      summarizing multiple elements from the source array that are mapped to a
      single element in the destination array.</para>

      <para>For example, suppose you have a 2-dimensional array describing
      some recent olympic champions, and you want to produce a 1-dimensional
      array that shows the gold-medal count for each country.</para>

      <para>The schema of the original 2-dimensional array (named "winners")
      appears below:</para>

      <para><programlisting>AFL% show(winners)</programlisting><screen><command>winners</command>

&lt; person:string,
country:string,
time:double &gt;

[year=1996:2008,13,0,
event(string)=3,3,0]</screen><para>To examine the data in the "winners" array, use the following AQL
      statement with the -o lcsv+ format: <para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> winners;
</programlisting><screen>{year,event} person,country,time
{1996,"dash"} "Bailey","Canada",9.84
{1996,"marathon"} "Thugwane","USA",7956
{1996,"steeplechase"} "Keter","Kenya",487.12
{2000,"dash"} "Greene","USA",9.87
{2000,"marathon"} "Abera","Ethiopia",7811
{2000,"steeplechase"} "Kosgei","Kenya",503.17
{2004,"dash"} "Gatlin","USA",9.85
{2004,"marathon"} "Baldini","Italy",7855
{2004,"steeplechase"} "Kemboi","Kenya",485.81
{2008,"dash"} "Bolt","Jamaica",9.69
{2008,"marathon"} "Wanjiru","Kenya",7596
{2008,"steeplechase"} "Kipruto","Kenya",490.34
</screen></para></para>

      <para>To create the schema for the desired array, execute the following
      AQL statement:</para>

      <para><programlisting>AQL% <command>CREATE ARRAY</command> perCountryMedalCount &lt;medalCount: uint64 null&gt; [country(string)=20,20,0];  </programlisting><para>Notice that the sole dimension is country, which is an attribute
      (not a dimension) of the original "winners" array. To populate the
      desired array with data, use the following AFL statement:</para>

      <para><programlisting>AFL% redimension_store (winners, perCountryMedalCount, count(*) as medalCount)
</programlisting><screen>{country} medalCount
{"Canada"} 1
{"Ethiopia"} 1
{"Italy"} 1
{"Jamaica"} 1
{"Kenya"} 5
{"USA"} 3
</screen><para>The result of this redimension_store operation is the desired
      array. You can examine the contents with the following AQL
      statement:</para>

      <para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> perCountryMedalCount;
</programlisting><screen>{country} medalCount
{"Canada"} 1
{"Ethiopia"} 1
{"Italy"} 1
{"Jamaica"} 1
{"Kenya"} 5
{"USA"} 3
</screen><para>Notice that the sum of the counts is 12—the number of nonempty
      cells in the "winners" array.</para>
    </para></para></para></para></section>
  </section>

  <section>
    <title>Order Statistics</title>

    <para>SciDB offers the following ordering and ranking capabilities.</para>

    <itemizedlist>
      <listitem>
        <para>Sort, which can be used to return a sorted vector of all array
        elements.</para>
      </listitem>

      <listitem>
        <para>Rank and avg_rank. These methods can be used to assign an
        ordinal rank to each element of the array. These can be calculated for
        the entire array, or on a per dimension basis.</para>
      </listitem>

      <listitem>
        <para>Quantiles. These can be calculated for the entire array, or on a
        per dimension basis.</para>
      </listitem>
    </itemizedlist>

    <section remap="h3">
      <title>Sort</title>

      <para><indexterm>
          <primary>sort</primary>
        </indexterm><indexterm>
          <primary>arrays</primary>

          <secondary>sorting</secondary>
        </indexterm>The sort operator takes as input a multi-dimensional array
      and produces a one-dimensional vector of elements sorted by the
      specified attribute.</para>

      <para>If you specify multiple attributes, all attributes are used for
      sorting. Array elements are sorted first by the first attribute, and
      then for each value of the first attribute, they are sorted by the
      second attribute, and so on for each specified attribute.</para>

      <para>If multiple elements have the same attribute value—for an
      attribute that is not specified in the sort operator—the sort operator
      selects an arbitrary ordering of elements when producing the sorted
      output.</para>

      <para>The result array contains only non-empty cells from the source
      array. Consider the array <code>m4x4_empty</code>, which is a
      2-dimensional array with some empty cells. Each element contains two
      attributes. To sort the array elements by <code>val</code>, use the
      following query:</para>

      <para><programlisting>AQL% 
<command>SELECT</command> * 
<command>FROM</command> sort(m4x4_empty, val); 
</programlisting><screen>{n} val,label
{0} 0,null
{1} 4,null
{2} 6,null
{3} 7,null
{4} 8,null
{5} 13,null
{6} 14,null
</screen><para>To sort the array by val, and then by label, use the following
      query.</para>

      <para><programlisting>AQL% 
<command>SELECT</command> * 
<command>FROM</command> sort(m4x4_empty, label); 
</programlisting><screen>{n} val,label
{0} 0,null
{1} 4,null
{2} 6,null
{3} 7,null
{4} 8,null
{5} 13,null
{6} 14,null
</screen><para>To use a descending sort, use the following command:</para>

      <para><programlisting>AQL% 
<command>SELECT</command> * 
<command>FROM</command> sort(m4x4_empty, label desc); 
</programlisting><screen>{n} val,label
{0} 0,null
{1} 4,null
{2} 6,null
{3} 7,null
{4} 8,null
{5} 13,null
{6} 14,null
</screen></para></para></para></section>

    <section remap="h3">
      <title>Ranking Methods</title>

      <para><indexterm>
          <primary>rank</primary>
        </indexterm>The <code>rank</code> and <code>avg_rank</code> operators
      rank the elements of an array or within subgroups of an array.</para>

      <para>Consider the following examples using the <code>m4x4_double</code>
      array.</para>

      <para><indexterm>
          <primary>ranking methods</primary>

          <secondary>rank</secondary>
        </indexterm>You can rank the elements of <code>m4x4_double</code> by
      dimension with the rank operator. For example, this query returns an
      array where the second attribute of each cell is the rank of the element
      for dimension j (columns):</para>

      <para><programlisting>AFL% CREATE ARRAY m4x4_double &lt; val:double &gt;[i=0:3,4,0,j=0:3,4,0];  </programlisting><screen><command>m4x4_double</command>

&lt; val:double &gt;

[i=0:3,4,0,
j=0:3,4,0]</screen><programlisting>AFL% scan(m4x4_double);  </programlisting><screen>[
[(0),(10.0977),(10.9116),(1.69344)],
[(9.08163),(11.5071),(3.35299),(7.88384)],
[(11.8723),(4.94542),(6.52825),(11.9999)],
[(6.43888),(5.042),(11.8873),(7.80345)]
]</screen><para><programlisting>AQL% <command>SELECT</command> * <command>FROM</command> rank(m4x4_double,val,j);  </programlisting><screen>[
[(0,1),(10.0977,3),(10.9116,3),(1.69344,1)],
[(9.08163,3),(11.5071,4),(3.35299,1),(7.88384,3)],
[(11.8723,4),(4.94542,1),(6.52825,2),(11.9999,4)],
[(6.43888,2),(5.042,2),(11.8873,4),(7.80345,2)]
]</screen><para><indexterm>
          <primary>ranking methods</primary>

          <secondary>avg_rank</secondary>
        </indexterm>The operators rank and avg_rank offer different ways to
      handle ties. For example, consider the array <code>m4x4_floor</code>:
      <para><programlisting>AQL% 
<command>SELECT</command> floor(val) 
<command>INTO</command> m4x4_floor
<command>FROM</command> m4x4_double;  </programlisting><screen>[[(0),(10),(10),(1)],[(9),(11),(3),(7)],[(11),(4),(6),(11)],[(6),(5),(11),(7)]]
</screen></para></para>

      <para>Ranking by dimension j produces ties. There are two cells with
      value 7 in the last column. The <code>rank</code> operator assigns the
      tied values the same rank. The <code>avg_rank</code> operator assigns
      the average of the rank positions occupied by the tied values.</para>

      <para><programlisting>AQL% 
<command>SELECT</command> *
<command>FROM</command> rank(m4x4_floor,expr,j);  </programlisting><screen>[
[(0,1),(10,3),(10,3),(1,1)],
[(9,3),(11,4),(3,1),(7,2)],
[(11,4),(4,1),(6,2),(11,4)],
[(6,2),(5,2),(11,4),(7,2)]
]</screen><programlisting>AQL% 
<command>SELECT</command> *
<command>FROM</command> avg_rank(m4x4_floor,expr,j);  </programlisting><screen>[
[(0,1),(10,3),(10,3),(1,1)],
[(9,3),(11,4),(3,1),(7,2.5)],
[(11,4),(4,1),(6,2),(11,4)],
[(6,2),(5,2),(11,4),(7,2.5)]
]</screen></para></para></para></section>

    <section>
      <title>Calculating Quantiles</title>

      <para><indexterm>
          <primary>quantile</primary>
        </indexterm>The <code>quantile</code> operator calculates quantiles
      over array attributes. A <emphasis>q</emphasis>-quantile is a point
      taken at a specified interval on a sorted data set that divides the data
      set into q subsets. The 2-quantile is the <emphasis>median</emphasis>,
      that is, the numerical value separating the lower half and upper half of
      the data set. For example, consider the data set represented by the
      array <code>m4x4_floor</code>: <para><programlisting>AFL% show(m4x4_floor)</programlisting><screen><command>m4x4_floor</command>

&lt; expr:int64 &gt;

[i=0:3,4,0,
j=0:3,4,0]</screen><programlisting>AFL% scan(m4x4_floor);  </programlisting><screen>[
[(0),(10),(10),(1)],
[(9),(11),(3),(7)],
[(11),(4),(6),(11)],
[(6),(5),(11),(7)]
]</screen></para></para>

      <para>The lowest value in <code>m4x4_floor</code> is 0, the median value
      is 7, and the highest value is 11. <para><programlisting>AQL% 
<command>SELECT</command> * 
<command>FROM</command> quantile(m4x4_floor,2); 
</programlisting><screen>{quantile} percentage,expr_quantile
{0} 0,0
{1} 0.5,7
{2} 1,11
</screen> The result of the 8-quantile for <code>m4x4_floor</code> is
      shown below. <para><programlisting>AQL% 
<command>SELECT</command> * 
<command>FROM</command> quantile(m4x4_floor,8); 
</programlisting><screen>{quantile} percentage,expr_quantile
{0} 0,0
{1} 0.125,1
{2} 0.25,4
{3} 0.375,6
{4} 0.5,7
{5} 0.625,9
{6} 0.75,10
{7} 0.875,11
{8} 1,11
</screen></para></para></para>
    </section>
  </section>
</chapter>
