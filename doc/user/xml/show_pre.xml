<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<refentry>
  <refnamediv>
    <refname>show</refname>

    <refpurpose><indexterm>
        <primary>show</primary>
      </indexterm><indexterm>
        <primary>schema, displaying</primary>
      </indexterm><indexterm>
        <primary>arrays</primary>

        <secondary>showing schema</secondary>
      </indexterm>Produces a result array whose contents describe the schema
    of an array you supply.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>show(<replaceable>named_array</replaceable>);</synopsis>

    <para>or</para>

    <synopsis>show('<replaceable>query</replaceable>'[,'afl']);</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Summary</title>

    <para>The <literal>show</literal> operator returns an array's schema. The
    argument <replaceable>named_array</replaceable> must be an array that was
    previously created and stored in SciDB.</para>

    <para>You can also use <literal>show</literal> to return the schema for a
    query. This can be useful to preview the schema for a query, instead of
    having to first save the result of the query to an array. Use the optional
    string, <emphasis role="bold">'afl'</emphasis>, if the query is written in
    AFL.</para>

    <para>You can use the show operator in the FROM clause of an AQL SELECT
    statement, as a stand-alone operator in a AFL statement, or as an operand
    within other SciDB operators.</para>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <informalexample>
      <para>This example shows the schema for an array, creates and stores an
      abridged version of that array, then shows the schema of the abridged
      version.</para>

      <procedure>
        <step>
          <para>Show the schema for the original array <programlisting
          language="test">
--afl create array winnersFlat &lt;event:string,year:int64,person:string,country:string,time:double&gt;[i=0:*,12,0] --show-query=no --show-output=no
--shell --show-query=no --show-output=no --command=csv2scidb -s 1 -p SNSSN &lt; ../examples/winners2.csv &gt; ../examples/winners2.scidb
--aql load winnersFlat from '../examples/winners2.scidb'; --show-query=no --show-output=no
--afl CREATE ARRAY champions&lt;person:string,country:string,time:double&gt; 
   [year=1996:2008,13,0,event(string)=3,3,0]; --show-query=no --show-output=no
--afl redimension_store(winnersFlat,champions); --show-query=no --show-output=no
</programlisting> <programlisting language="test">--aql select * from show(champions); --show-query=yes --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Use the project and store operators to create an abridged
          array that excludes the country and time attributes: <programlisting
          language="test">--aql select * into championsAbridged from project(champions,person); --show-query=yes --show-output=yes
</programlisting></para>
        </step>

        <step>
          <para>Show the schema for the abridged array: <programlisting
          language="test">--aql select * from show(championsAbridged); --show-output=yes --show-query=yes
</programlisting></para>
        </step>
      </procedure>
    </informalexample>

    <informalexample>
      <para>This example illustrates the usage of <literal>show</literal> to
      return schema for queries.</para>

      <procedure>
        <step>
          <para>Create two arrays, and fill them with some
          data.<programlisting language="test">--afl store(build(&lt;val1:int64&gt; [i=0:4,5,0, j=0:0,1,0], i),A); --output-format=dense
--afl store(build(&lt;val2:int64&gt; [i=0:0,1,0, j=0:4,5,0], 10-j),B); --output-format=dense
</programlisting></para>
        </step>

        <step>
          <para>View the schema of the result of multiplying A and B.
          <programlisting language="test">--afl show('multiply(A,B)','afl'); --output-format=dense</programlisting></para>
        </step>

        <step>
          <para>You can use the show operator to view the output type of an
          aggregate. <programlisting language="test">--afl show('select sum(val1) from A'); --output-format=dense</programlisting><programlisting
          language="test">--afl show('select stdev(val1) from A'); --output-format=dense</programlisting></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
