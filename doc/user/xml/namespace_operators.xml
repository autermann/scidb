<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<chapter remap="h1">
    <title>Namespace Operators: Get Information About Your SciDB Database</title>
    <para>AFL provides a number of mechanisms for getting information about the database it is managing. These facilities all interrogate the SciDB internal meta-data, and return an array object which can be subject to further query expressions.</para>
    <sect1 remap="h2">
      <title>attributes</title>
      <para><emphasis role="bold">Summary</emphasis>: Array attributes</para>
      <para>Get a list of array attributes. Returns an array with the following attributes: name, type, and boolean flag. The boolean flag represents nullability of the attribute and is<emphasis> True</emphasis> if the attribute can be set to NULL.</para>
      <para><emphasis role="bold">Signature</emphasis>:</para>
      <screen>attributes ( array_identifier )</screen>
      <para>The argument to the attributes operator is the name of the array.</para>
      <para><emphasis role="bold">Examples</emphasis>:</para>
      <screen> CREATE ARRAY Attr_Example_One &lt; A: int32, B: string &gt; [ I=0:9,10,0 ];
 attributes ( Attr_Example_One );

 [(&quot;A&quot;,&quot;int32&quot;,false),(&quot;B&quot;,&quot;string&quot;,false)]
CREATE ARRAY Attr_Example_Two &lt; A: string, B: double, C: int32 &gt; [ I=0:9,10,0\
 ];
attributes ( Attr_Example_Two );

[(&quot;A&quot;,&quot;string&quot;,false),(&quot;B&quot;,&quot;double&quot;,false),(&quot;C&quot;,&quot;int32&quot;,false)]</screen>
      <para>Attributes are only available for stored arrays. Result arrays returned by an AFL command may not be used as input to this <literal condition="western">attributes</literal> operator.</para>
    </sect1>
    <sect1 remap="h2">
      <title>dimensions</title>
      <para><emphasis role="bold">Summary</emphasis>: List array dimensions.</para>
      <para><emphasis role="bold">Signature</emphasis>:</para>
      <para>dimensions (<emphasis> array_identifier</emphasis> )</para>
      <para>The argument to the dimensions operator is the name of the array. It returns an array with the following attributes: name, start, length, chunk size, chunk overlap, low-boundary, high-boundary.</para>
      <para><emphasis role="bold">Examples</emphasis>:</para>
      <screen>create array three_dimensions &lt;val:int64&gt; [X=0:9,10,0, Y=0:9,10,0, Z=0:99,10,\
0];
store(build(three_dimensions,X+1/1.0),three_dimensions);

dimensions (three_dimensions);

[(&quot;X&quot;,0,10,10,0,0,9,&quot;int64&quot;),(&quot;Y&quot;,0,10,10,0,0,9,&quot;int64&quot;),(&quot;Z&quot;,0,100,10,0,0,99,&quot;int64&quot;)]</screen>
      <para>For a regular array defined using a create array statement with fixed dimensions the<emphasis> start</emphasis> and<emphasis> length</emphasis> are set to the values specified in the CREATE ARRAY statement.</para>
      <para>The low and high boundaries represent the current occupancy of cells within the array. Low-boundary represents the lowest dimension value occupied by any element in the array and high-boundary represents the highest dimension value occupied by an array element.</para>
      <para><emphasis role="bold">NOTE:</emphasis></para>
      <itemizedlist><listitem>
          <para> The length field for an unbounded dimension is set to the maximal signed 64-bit integer. </para>
        </listitem>
<listitem>
          <para> The low and high boundaries for a newly created array that does not yet have any data is also set to undefined values recorded as special constants (MAXINT64 - 1) and -(MAXINT64-1) respectively. These constants are interpreted as undefined for array dimension values into which no data has been loaded. </para>
        </listitem>
</itemizedlist>
    </sect1>
    <sect1 remap="h2">
      <title>help</title>
      <para><emphasis role="bold">Summary</emphasis>: Operator signature</para>
      <para>Accepts an operator name and returns an array containing a human-readable signature for that operator.</para>
      <para><emphasis role="bold">Signature</emphasis>: help (<emphasis> operator_name: string</emphasis> )</para>
      <para><emphasis role="bold">Example</emphasis>:</para>
      <screen>help(&apos;multiply&apos;);

[(&quot;Operator: multiply
Usage: multiply(&lt;input&gt;, &lt;input&gt;)&quot;)]</screen>
    </sect1>
    <sect1 remap="h2">
      <title>list</title>
      <para><emphasis role="bold">Summary</emphasis>: List contents of SciDB namspace</para>
      <para>The <literal condition="western">list</literal> operator allows you to get a list of elements in the current SciDB instance.</para>
      <para><emphasis role="bold">Signature</emphasis>:</para>
      <screen>list ( element : string )</screen>
      <para><emphasis role="bold">Arguments</emphasis>:</para>
      <para>The<emphasis> element : string</emphasis> parameter value is one of the following:</para>
      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="50*"/>
          <colspec colname="c2" colwidth="50*"/>
          <tbody>
            <row>
              <entry><para> <literal condition="western">aggregates</literal></para></entry>
              <entry><para> Show all operators that take as input a SciDB array and return a scalar.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">arrays</literal></para></entry>
              <entry><para> Show all arrays created in the current SciDB instance.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">functions</literal></para></entry>
              <entry><para> Show all functions. Each function will be listed with its available dataypes and the library in which it resides.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">libraries</literal></para></entry>
              <entry><para> Show all libraries that are loaded in the current SciDB instance.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">nodes</literal></para></entry>
              <entry><para> Show all nodes. Each node will be listed with its port, id number, and time and date stamp for when it came online.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">operators</literal></para></entry>
              <entry><para> Show all operators and the library in which they reside.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">types</literal></para></entry>
              <entry><para> Show all the dataypes the SciDB supports.</para></entry>
            </row>
            <row>
              <entry><para> <literal condition="western">queries</literal></para></entry>
              <entry><para> Show all active queries. Each active query will have an id, a time and date when it was initiated, an error code, whether it generated any errors, and a status (boolean flag where TRUE means that the query is idle).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>If called without any parameters, <literal condition="western">list</literal> will return a list of all arrays created in SciDB. Arrays persist across SciDB sessions until you re-initialize the database (<literal condition="western">scidb.py initall</literal><emphasis> hostname</emphasis>).</para>
      <para><emphasis role="bold">Example</emphasis>:</para>
      <screen>list();

[(&quot;Reads&quot;),(&quot;Load_and_Append&quot;),(&quot;Load_Two&quot;),(&quot;Example_One&quot;),(&quot;Example_Four&quot;),(&quot;Build_E\
xample_INT&quot;)]

list(&apos;arrays&apos;);

[(&quot;Reads&quot;),(&quot;Load_and_Append&quot;),(&quot;Load_Two&quot;),(&quot;Example_One&quot;),(&quot;Example_Four&quot;),(&quot;Build_E\
xample_INT&quot;)]</screen>
      <para>The <literal condition="western">list</literal> operator returns a SciDB array, so you can be use it as the input to other data sampling operators. The following query returns all of the functions in SciDB named &apos;regex&apos;, together with their function signatures:</para>
      <screen>filter(list (&apos;functions&apos;), name=&apos;regex&apos;);</screen>
      <para>The following query uses the SciDB<emphasis> regex()</emphasis> function to filter the functions to find only those that take as input a pair of strings:</para>
      <screen>filter (list (&apos;functions&apos;), regex(profile, &apos;(.*)(string,string)(.*)&apos;));</screen>
      <para>And finally, the following query filters out only functions that take a pair of strings as input and compute some boolean result (like &quot;regex&quot;). Then it sorts that result by the function&apos;s name (the first attribute produced by<emphasis> list(&apos;functions&apos;)</emphasis>), and finally projects out only the function&apos;s signature:</para>
      <screen>project (
    sort (
        filter (
            list (&apos;functions&apos;),
            regex(profile, &apos;(.*)bool(.*)(string,string)(.*)&apos;)
        ),
    1),
    profile
);</screen>
    </sect1>
    <sect1 remap="h2">
      <title>show</title>
      <para><emphasis role="bold">Summary</emphasis>: Array format</para>
      <para>The <literal condition="western">show</literal> operator combines the information an array&apos;s attributes and dimensions. The result is formated as it would appear in a <literal condition="western">create array ...</literal> statement.</para>
      <para><emphasis role="bold">Signature</emphasis>:</para>
      <para>show (<emphasis> array_identifier</emphasis> )</para>
      <para><emphasis role="bold">Example</emphasis>:</para>
      <screen>CREATE ARRAY Attr_Example_Two &lt; A: string, B: double, C: int32 &gt; [ I=0:9,10,0\
 ];
show ( Attr_Example_Two );

[(&quot;Attr_Example_Two 8&lt;A:string NOT NULL,B:double NOT NULL,C:int32 NOT NULL&gt; [I\
=0:9,10,0]&quot;)]</screen>
    </sect1>
    <sect1 remap="h2">
      <title>versions</title>
      <para><emphasis role="bold">Summary</emphasis>: Array versions</para>
      <para>Get a list of array versions for an array.</para>
      <para><emphasis role="bold">Signature</emphasis>:</para>
      <para>versions (<emphasis> array_identifier</emphasis> )</para>
      <para><emphasis role="bold">Example</emphasis>:</para>
      <screen>versions(updarr);

[(1,&quot;12/31/10 11:03:10&quot;),(2,&quot;12/31/10 12:22:17&quot;),(3,&quot;12/31/10 12:22:19&quot;)]</screen>
      <para>The output of the versions command is a list of versions, each of which has a version ID and a datestamp which is the date and time of creation of that version.</para>
    </sect1>
  </chapter>
