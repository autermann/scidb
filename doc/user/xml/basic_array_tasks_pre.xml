<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<chapter>
  <title>Basic Array Tasks</title>

  <section>
    <title>Selecting Data From an Array</title>

    <para><indexterm>
        <primary>data</primary>

        <secondary>selecting</secondary>
      </indexterm><indexterm>
        <primary>selecting data</primary>
      </indexterm><indexterm>
        <primary>AQL</primary>

        <secondary>select</secondary>
      </indexterm>The AQL Data Manipulation Language (DML) provides queries to
    access and operate on array data. The basis for selecting data from a
    SciDB array is the AQL <code><command>SELECT</command></code> statement
    with <code><command>INTO</command></code>,
    <code><command>FROM</command></code>, and
    <code><command>WHERE</command></code> clauses.</para>

    <section>
      <title>SELECT Statement Syntax</title>

      <para>The syntax of the <code> <command>SELECT</command> </code>
      statement is:<synopsis><command>SELECT</command> <replaceable>expression</replaceable>
       [<command>INTO</command> <replaceable>target_array</replaceable>]
       <command>FROM</command> <replaceable>array_expression</replaceable> | <replaceable>source_array</replaceable>
       [<command>WHERE</command> <replaceable>expression</replaceable>]
       </synopsis> The arguments for the statement are: <variablelist>
          <?dbfo term-width="1.5in"?>

          <varlistentry>
            <term><replaceable>expression</replaceable></term>

            <listitem>
              <para><code><command>SELECT</command></code>
              <replaceable>expression</replaceable> can select individual
              attributes and dimensions, as well as constants and expressions.
              The wildcard character * means select all attributes.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><replaceable>target_array</replaceable></term>

            <listitem>
              <para>The <code><command>INTO</command></code> clause can create
              an array to store the output of the query. The target array may
              also be a pre-existing array in the current SciDB
              namespace.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><replaceable>array_expression</replaceable> |
            <replaceable>source_array</replaceable></term>

            <listitem>
              <para>The <code><command>FROM</command></code> clause takes a
              SciDB array or array expression as argument. The
              <replaceable>array_expression</replaceable> argument is an
              expression or subquery that returns an array result. The
              <replaceable>source_array</replaceable> is an array that has
              been created and stored in the current SciDB namespace.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><replaceable>expression</replaceable></term>

            <listitem>
              <para>The <replaceable>expression</replaceable> argument of the
              <code><command>WHERE</command></code> clause allows to you
              specify parameters that filter the query.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section>
      <title>The SELECT Statement</title>

      <para>AQL expressions in the <code> <command>SELECT</command> </code>
      list or the <code> <command>WHERE</command> </code> clause are standard
      expressions over the attributes and dimensions of the array. The
      simplest <code> <command>SELECT</command> </code> statement is
      <code><command>SELECT</command> *</code>, which selects all data from a
      specified array or array expression. Consider two arrays, <code>A</code>
      and <code>B</code>: <programlisting language="test">
--aql CREATE ARRAY A &lt;val_a:double&gt;[i=0:9,10,0]; --show-output=no
--aql CREATE ARRAY B &lt;val_b:double&gt;[j=0:9,10,0]; --show-output=no

--afl load(A, '../examples/A.scidb'); --show-output=no --show-query=no
--afl load(B, '../examples/B.scidb'); --show-output=no --show-query=no
</programlisting> These arrays contain data. To see all the data stored in the
      array, you can use the following <code><command>SELECT</command></code>
      statement: <programlisting language="test">
--aql SELECT * FROM A; --output-format=auto
</programlisting> <programlisting language="test">
--aql SELECT * FROM B; --output-format=auto 
</programlisting><indexterm>
          <primary>AQL</primary>

          <secondary>from</secondary>
        </indexterm>The <code>show</code> command returns an array result
      containing an array's schema. To see the entire schema, use a
      <code><command>SELECT</command> *</code> statement with the
      <code>show</code> command: <programlisting language="test">
--aql SELECT * FROM show(A); --output-format=auto 
--aql SELECT * FROM show(B); --output-format=auto 
</programlisting></para>

      <para>To refine the result of the <command> <code>SELECT</code>
      </command> statement, use an argument that specifies part of an array
      result. <command> <code>SELECT</code> </command> can take array
      dimensions or attributes as arguments: <programlisting language="test">
--aql SELECT j from B; --output-format=auto
--aql SELECT val_b from B; --output-format=auto 
</programlisting> The <command> <code>SELECT</code> </command> statement can
      also take an expression as an argument. For example, you can scale
      attribute values by a certain amount:</para>

      <programlisting language="test">
SELECT val_b/10 FROM B; --output-format=auto
</programlisting>

      <para><indexterm>
          <primary>AQL</primary>

          <secondary>where</secondary>
        </indexterm>The <code> <command>WHERE</command> </code> clause can
      also use built-in functions to create expressions. For example, you can
      choose just the middle three cells of array B with the greater-than and
      less-than functions with the <code>and</code> operator: <programlisting
      language="test">
--aql SELECT j FROM B WHERE j &gt; 3 and j &lt; 7; --output-format=auto
</programlisting> You can also select an expression of the attribute values
      for the middle three cells of B by providing an expression for the
      argument of both <code><command>SELECT</command></code> and
      <code><command>WHERE</command></code>. For example, this statement
      returns the square root of the middle three cells of array
      <code>B</code>: <programlisting language="test">
--aql SELECT sqrt(val_b) FROM B WHERE j&gt;3 and j&lt;7; --output-format=auto
</programlisting> The <code><command>FROM</command></code> clause can take an
      array or any operation that outputs an array as an argument. The
      <code><command>INTO</command></code> clause stores the output of a
      query.</para>
    </section>
  </section>

  <section>
    <title>Array Joins</title>

    <para><indexterm>
        <primary>join</primary>
      </indexterm><indexterm>
        <primary>arrays</primary>

        <secondary>join</secondary>
      </indexterm>A join combines two or more arrays (typically as a
    preprocessing step for subsequent operations). The simplest type of join
    is an <emphasis>inner join</emphasis>. An inner join performs an
    attribute-attribute join on every cell in two source arrays. An inner join
    can be performed for two arrays with the same number of dimensions, same
    dimension starting coordinates, and same chunk size.</para>

    <para>The syntax of a inner join statement is:<synopsis><command>SELECT</command> <replaceable>expression</replaceable> <command>FROM</command> <replaceable>src_array1, src_array2</replaceable></synopsis></para>

    <para>The inner join of arrays A and B joins the attributes:
    <programlisting language="test">--aql SELECT * FROM A,B; --output-format=auto 
</programlisting></para>

    <para>This query will store the attribute-attribute join of A and B in
    array C: <programlisting language="test">--aql SELECT * INTO C FROM A, B; --output-format=auto 
</programlisting> The target array C has schema: <programlisting
    language="test">--schema C;</programlisting> The attributes maintain the
    names from A and B; the dimension takes the name from the first array of
    the join operation.</para>

    <para>Arrays do not need to have the same number of attributes to be
    compatible. As long as the dimension starting indices, chunk sizes, and
    chunk overlaps are the same, the arrays can be joined. For example, you
    can join the two-attribute array C with the one-attribute array B:
    <programlisting language="test">--aql SELECT * INTO D FROM C,B; --output-format=auto 
</programlisting> This produces array D with the following schema, as returned
    by the show operator: <programlisting language="test">--aql SELECT * FROM show(D); --output-format=auto 
</programlisting> Since C and B shared an attribute name, <code>val_b</code>,
    the array D contains a renamed attribute, <code>val_b_2</code>.</para>

    <para>If two arrays have an attribute with the same name, you can select
    the attributes to use with array dot notation: <programlisting
    language="test">--aql SELECT  C.val_b + D.val_b FROM C,D; --output-format=auto 
</programlisting>If you are using attributes that have the same fully
    qualified name, for example, you are joining an array with itself, you can
    use an alias to rename an array for the particular query. This query
    aliases array A to a1 and a2, then uses dot notation to use the attribute
    <code>val_a</code> in two different expressions. <programlisting
    language="test">--aql SELECT a1.val_a,a2.val_a+2 FROM A as a1,A as a2; --output-format=auto 
</programlisting> The aliasing rules apply to other join operators as well,
    including merge, cross, and cross_join. See the section "Aliases" below
    for more information on aliases.</para>

    <para><indexterm>
        <primary>AQL</primary>

        <secondary>join</secondary>
      </indexterm>The <code> <command>JOIN ... ON</command> </code> predicate
    calculates the multidimensional join of two arrays after applying the
    constraints specified in the <command><code>ON</code></command> clause.
    The <command><code>ON</code></command> clause lists one or more
    constraints in the form of equality predicates on dimensions or
    attributes. The syntax is: <synopsis><command>SELECT</command> <replaceable>expression</replaceable> <optional><command>INTO</command> <replaceable>target_array</replaceable></optional>
     <command>FROM</command> <replaceable>array_expression</replaceable> | <replaceable>source_array</replaceable>
    [ <command>JOIN</command> <replaceable>expression</replaceable> | <replaceable>attribute</replaceable> ]
     <command>ON</command> <replaceable>dimension</replaceable> | <replaceable>attribute</replaceable></synopsis></para>

    <para>A dimension-dimension equality predicate matches two compatible
    dimensions, one from each input. The result of this join is an array with
    higher number of dimensions—combining the dimensions of both its inputs,
    less the matched dimensions. If no predicate is specified, the result is
    the full cross product array.</para>

    <para>An attribute predicate in the <code><command>ON</command></code>
    clause is used to filter the output of the multidimensional array.</para>

    <para>For example, consider a 2-dimensional array <code>m3x3</code>schema
    and attributes values: <programlisting language="test">--aql CREATE ARRAY m3x3&lt;a:double&gt; [i=1:3,3,0,j=1:3,3,0]; 
--afl load(m3x3, '../examples/m3x3.txt'); --show-query=no --show-output=no
</programlisting> Now consider also a 1-dimensional array <code>vector3</code>
    whose schema and attributes are: <programlisting language="test">--aql CREATE ARRAY vector3&lt;b:double&gt; [k=1:3,3,0]; --show-output=no --show-query=no
--afl load(vector3, '../examples/vector3.scidb'); --show-query=no --show-output=no
--schema vector3;
--afl scan(vector3); --output-format=dense 
</programlisting></para>

    <para>A dimension join returns a 2-dimensional array with coordinates
    <code>{i,j}</code> in which the cell at coordinate <code>{i,j}</code>
    combines the cell at <code>{i,j}</code> of <code>m3x3</code> with the cell
    at coordinate <code>{k=j}</code> of <code>vector3</code>: <programlisting
    language="test">--aql SELECT * FROM m3x3 JOIN vector3 ON m3x3.j = vector3.k; --output-format=auto 
</programlisting></para>
  </section>

  <section remap="h3">
    <title>Aliases</title>

    <para><indexterm>
        <primary>AQL</primary>

        <secondary>aliases</secondary>
      </indexterm><indexterm>
        <primary>queries</primary>

        <secondary>aliases</secondary>
      </indexterm><indexterm>
        <primary>arrays</primary>

        <secondary>aliases</secondary>
      </indexterm><indexterm>
        <primary>AQL</primary>

        <secondary>as</secondary>
      </indexterm><indexterm>
        <primary>aliases</primary>
      </indexterm>AQL provides a way to refer to arrays and array attributes
    in a query via aliases. These are useful when using the same array
    repeatedly in an AQL statement, or when abbreviating a long array name.
    Aliases are created by adding an "as" to the array or attribute name,
    followed by the alias. Future references to the array can then use the
    alias. Once an alias has been assigned, all attributes and dimensions of
    the array can use the fully qualified name using the dotted naming
    convention. <programlisting language="test">--aql  SELECT data.i*10 FROM A AS data WHERE A.i &lt; 5; --output-format=auto 
</programlisting></para>
  </section>

  <section remap="h3">
    <title>Nested Subqueries</title>

    <para><indexterm>
        <primary>subqueries</primary>
      </indexterm><indexterm>
        <primary>queries</primary>

        <secondary>nesting</secondary>
      </indexterm>You can nest AQL queries to refine query results.</para>

    <para>For example, you can nest <code> <command>SELECT</command> </code>
    statements before a <code> <command>WHERE</command> </code> clause to
    select a subset of the query output.<programlisting language="test">--aql SELECT pow(c,2) FROM
(SELECT A.val_a + B.val_b AS c FROM A,B) WHERE i &gt; 5; --output-format=auto 
</programlisting></para>

    <para>This query does the following:<orderedlist>
        <listitem>
          <para>Sums two attributes from two different arrays and stores the
          output in an alias,</para>
        </listitem>

        <listitem>
          <para>Selects the cells with indices greater than 5, and</para>
        </listitem>

        <listitem>
          <para>Squares the result.</para>
        </listitem>
      </orderedlist></para>
  </section>

  <section remap="h3">
    <title>Data Sampling</title>

    <para><indexterm>
        <primary>data</primary>

        <secondary>sampling</secondary>
      </indexterm><indexterm>
        <primary>sampling data</primary>
      </indexterm><indexterm>
        <primary>bernoulli</primary>
      </indexterm>SciDB provides operations to sample array data. The
    <code>bernoulli</code> operator allows you to select a subset of array
    cells based upon a given probability. For example, you can use the
    <code>bernoulli</code> operator to randomly sample data from an array one
    element at a time. The syntax of <code>bernoulli</code> is:
    <programlisting>
bernoulli(<replaceable>array</replaceable>, <replaceable>probability:double</replaceable>  <optional>, <replaceable>seed:int64</replaceable></optional>) </programlisting></para>

    <para>The <code>sample</code> command allows you to randomly sample data
    one array chunk at a time:<programlisting>sample(<replaceable>array</replaceable>, <replaceable>probability:double</replaceable>  <optional>, <replaceable>seed:int64</replaceable></optional>) </programlisting>The
    probability is a double between 0 and 1. The commands work by generating a
    random number for each cell or chunk in the array and scaling it to the
    probability. If the random number is within the probability, the
    cell/chunk is included. Both commands allow you to produce repeatable
    results by seeding the random number generator. All calls to the random
    number generator with the same seed produce the same random number. The
    seed must be a 64-bit integer.</para>
  </section>
</chapter>
