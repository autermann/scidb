<?xml version="1.0" encoding="UTF-8"?>
<!-- This document was created with Syntext Serna Free. -->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"docbookV4.5/docbookx.dtd">
<chapter>
  <title>Creating and Removing SciDB Arrays</title>

  <para>SciDB organizes data as a collection of multidimensional arrays. Just
  as the relational table is the basis of relational algebra and SQL, the
  multidimensional array is the basis for SciDB.</para>

  <para>A SciDB database is organized into arrays that have:</para>

  <itemizedlist>
    <listitem>
      <para>A<emphasis> name</emphasis>. Each array in a SciDB database has an
      identifier that distinguishes it from all other arrays in the same
      database.</para>
    </listitem>

    <listitem>
      <para>A<emphasis> schema</emphasis>, which is the array structure. The
      schema contains array <emphasis role="">attributes</emphasis> and
      <emphasis>dimensions</emphasis>.</para>

      <orderedlist>
        <listitem>
          <para>Each <emphasis>attribute</emphasis> contains data being stored
          in the array's cells. A cell can contain multiple attributes.</para>
        </listitem>

        <listitem>
          <para>Each<emphasis> dimension</emphasis> consists of a list of
          index values. At the most basic level the dimension of an array is
          represented using 64-bit unsigned integers. The number of index
          values in a dimension is referred to as the dimension's
          <emphasis>size</emphasis>.</para>
        </listitem>
      </orderedlist>
    </listitem>
  </itemizedlist>

  <sect1>
    <title>Create an Array</title>

    <para>The AQL <code> <command>CREATE ARRAY</command> </code> statement
    creates a new array and specifies the array schema. The syntax of the
    <code> <command>CREATE ARRAY</command> </code> statement for a bounded
    array is: <programlisting>
<command>CREATE ARRAY</command> <replaceable>array_name</replaceable> &lt;<replaceable>attributes</replaceable>&gt; [<replaceable>dimensions</replaceable>]
</programlisting>The arguments for the <command> <code>CREATE ARRAY</code>
    </command> statement are as follows:<variablelist>
        <varlistentry>
          <term><code> <replaceable>array_name</replaceable> </code></term>

          <listitem>
            <para>The array name that uniquely identifies the array in the
            database. The maximum length of an array name is 1024 bytes. Array
            names may only contain the alphanumeric characters and underscores
            (_).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code> <replaceable>attributes</replaceable> </code></term>

          <listitem>
            <para>The array attributes contain the actual data. You specify an
            attribute with:<itemizedlist>
                <listitem>
                  <para><emphasis>Attribute name</emphasis>: Name of an
                  attribute. The maximum length of an attribute name is
                  1024 bytes. No two attributes in the same array can share a
                  name. Attribute names may only contain alphanumeric
                  characters and underscores (_).</para>
                </listitem>

                <listitem>
                  <para><emphasis>Attribute type</emphasis>: Type identifier.
                  One of the data types supported by SciDB. Use the
                  <code>list('types')</code> command to see the list of
                  available data types.</para>
                </listitem>

                <listitem>
                  <para>NULL (optional): Users can specify 'NULL' to indicate
                  attributes that are allowed to contain null values. If this
                  keyword is not used, all attributes must be non null, i.e.,
                  they cannot be assigned the special null value. If the user
                  does not specify a value for such an attribute, SciDB will
                  automatically substitute a default value.</para>
                </listitem>

                <listitem>
                  <para>DEFAULT (optional): Allows the user to specify the
                  value to be automatically substituted when a non NULL
                  attribute lacks a value. If unspecified substitution uses
                  system defaults for various types (0 for numeric types and
                  "" for string). Note that if the attribute is declared as
                  NULL, this clause is ignored.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><code> <replaceable>dimensions</replaceable> </code></term>

          <listitem>
            <para>Dimensions form the coordinate system for the array. The
            number of dimensions in an array is the number of coordinates or
            <emphasis>indices</emphasis> needed to specify an array cell. You
            specify dimensions with:<itemizedlist>
                <listitem>
                  <para><emphasis>Dimension name</emphasis>: Each dimension
                  has a name. Just like attributes, each dimension must be
                  named, and dimension names cannot be repeated in the same
                  array. The maximum length of a dimension name is 1024 bytes.
                  Optionally, you may want to create a noninteger dimension.
                  In this case, you will need to specify the dimension data
                  type in the name argument like this:
                  <replaceable>dimension_name</replaceable>(<replaceable>dimension_dataype</replaceable>).
                  Note that version 12.10 of SciDB and Paradigm4 support
                  noninteger dimensions only partially. Dimension names may
                  only contain alphanumeric characters and underscores
                  (_).</para>
                </listitem>
              </itemizedlist><itemizedlist>
                <listitem>
                  <para><emphasis>Dimension start</emphasis>: The starting
                  coordinate of a dimension. The default data type is 64-bit
                  integer. If you created a noninteger dimension, this
                  argument is omitted.</para>
                </listitem>
              </itemizedlist><itemizedlist>
                <listitem>
                  <para><emphasis>Dimension end</emphasis> or *: The ending
                  coordinate of a dimension, or * if unbounded. The default
                  data type is 64-bit integer for bounded dimensions.</para>
                </listitem>
              </itemizedlist><itemizedlist>
                <listitem>
                  <para><emphasis>Dimension chunk size</emphasis>: Number of
                  elements per chunk.</para>
                </listitem>

                <listitem>
                  <para><emphasis>Dimension chunk overlap</emphasis>: Number
                  of overlapping dimension-index values for adjacent
                  chunks.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para>The AQL <code> <command>CREATE ARRAY</command> </code> statement
    creates an array with specified name and schema. This statement creates an
    array: <programlisting language="test">
--aql CREATE ARRAY A &lt;x: double, err: double&gt; [i=0:99,10,0, j=0:99,10,0]; --show-output=no
</programlisting></para>

    <para>The array this statement created has:</para>

    <itemizedlist>
      <listitem>
        <para>Array name <code>A</code></para>
      </listitem>

      <listitem>
        <para>An array schema with:</para>

        <orderedlist>
          <listitem>
            <para>Two attributes: one with name <code>x</code> and type
            <code>double</code> and one with name <code>err</code> and type
            <code>double</code></para>
          </listitem>

          <listitem>
            <para>Two dimensions: one with name <code>i</code>, starting
            coordinate 0, ending coordinate 99, chunk size 10, and chunk
            overlap 0; one with name <code>j</code>, starting coordinate 0,
            ending coordinate 99, chunk size 10, and chunk overlap 0.</para>
          </listitem>
        </orderedlist>
      </listitem>
    </itemizedlist>

    <para>This statement creates a different array: <programlisting
    language="test">
--aql CREATE ARRAY B &lt;val:double&gt;[sample(string)=6,6,0]; --show-output=no 
</programlisting> Array B has one attribute named <code>val</code> of type
    <code>double</code> and one dimension named <code>sample</code> of type
    <code>string</code>. Dimension <code>sample</code> has length 6, chunk
    size 6, and chunk overlap 0.</para>

    <para>To delete an array with AQL, use the <code><command>DROP
    ARRAY</command></code> statement: <programlisting language="test">
--aql DROP ARRAY A; --show-output=no
</programlisting></para>
  </sect1>

  <sect1>
    <title>Array Attributes</title>

    <para>A SciDB array must have at least one attribute. The attributes of
    the array are used to store individual data values in array cells.</para>

    <para>For example, you may want to create a product database. A
    1-dimensional array can represent a simple product database where each
    cell has a string attribute called <code>name</code>, a numerical
    attribute called <code>price</code>, and a datetime attribute called
    <code>sold</code>: <programlisting language="test">
--aql CREATE ARRAY products &lt;name:string,price:float default float(100.0),sold:datetime&gt; [i=0:*,10,0]; --show-output=no
</programlisting> Attributes are by default set to not null. To allow an
    attribute to have value NULL, add NULL to the attribute data type
    declaration: <programlisting language="test">
--aql 
CREATE ARRAY product_null &lt;name:string NULL,price:float NULL,sold:datetime NULL&gt;
[i=0:*,10,0]; --show-output=no
</programlisting> This allows the attribute to store NULL values at data
    load.</para>

    <para>An attribute takes on a default value of 0 when no other value is
    provided. To set a default value other than 0, set the DEFAULT value of
    the attribute. For example, this code will set the default value of
    <code>price</code> to 100 if no value is provided: <programlisting
    language="test">
--aql CREATE ARRAY product_dflt &lt;name:string, price:float default float(100.0), sold:datetime&gt; [i=0:*,10,0]; --show-output=no
</programlisting></para>

    <sect2>
      <title>NULL and Default Attribute Values</title>

      <para>SciDB offers functionality to work with missing data. This chapter
      uses the data set m4x4_missing.txt, shown here: <programlisting
      language="test">
--shell --command=cat ../examples/m4x4_missing.txt; --show-query=no
</programlisting></para>

      <para>The array m4x4_missing has two issues: the attribute val2 is
      missing for the elements at coordinates <code>{x=1, y=0}</code> and
      <code>{x=3, y=1}</code>, and the cell at <code>{2, 2}</code> is
      completely empty. You can tell SciDB how you want to handle the missing
      data with various array options.</para>

      <para>First, consider the case of the completely empty cell, <code>{x=2,
      y=2}</code>. By default, SciDB will leave empty cells unchanged and
      replace NULL attributes with 0: <programlisting language="test">
--afl CREATE ARRAY m4x4_missing &lt;val1:double,val2:int32&gt;[x=0:3,4,0,y=0:3,4,0]; --show-output=no 
--afl load(m4x4_missing, '../examples/m4x4_missing.txt'); --output-format=auto --chunkify=yes
</programlisting></para>

      <para>To change the default value, that is, the value the SciDB
      substitutes for the missing data, set the default clause of the
      attribute option: <programlisting language="test">
--afl remove(m4x4_missing); --show-query=no --show-output=no
--afl CREATE ARRAY m4x4_missing &lt;val1:double,val2:int32 default 5468&gt;[x=0:3,4,0,y=0:3,4,0]; --show-output=no
--afl load(m4x4_missing, '../examples/m4x4_missing.txt'); --output-format=auto --chunkify=yes
</programlisting></para>
    </sect2>

    <sect2>
      <title>Codes for Missing Data</title>

      <para>In addition to simple single-valued NULL substitution described in
      the previous section, SciDB also supports multi-valued NULLs using the
      notion of <emphasis>missing reason codes</emphasis>. Missing reason
      codes allow an application to optionally specify multiple types of NULLs
      and treat each type differently.</para>

      <para>For example, if a faulty instrument occasionally fails to report a
      reading, that attribute could be represented in a SciDB array as NULL.
      If an erroneous instrument reports readings that are out of valid bounds
      for an attribute, that may also be represented as NULL.</para>

      <para>NULL must be represented using the token 'null' or '?' in place of
      the attribute value. In addition, NULL values can be tagged with a
      "missing reason code" to help a SciDB application distinguish among
      different types of null values—for example, assigning a unique code to
      the following types of errors: "instrument error", "cloud cover", or
      "not enough data for statistically significant result". Or, in the case
      of financial market data, data may be missing because "market closed",
      "trading halted", or "data feed down".</para>

      <para>The examples below show how to represent missing data in the load
      file. ? or null represent null values, and ?2 represents null value with
      a reason code of 2. <programlisting>
[[ ( 10, 4.5, "My String", 'C'), (10, 5.1, ?1, 'D'), 
(?2, 5.1, "Another String", ?) ...

or

[[ ( 10, 4.5, "My String", 'C'), (10, 5.1, ?1, 'D'), 
(?2, 5.1, "Another String", null) ...
</programlisting></para>

      <para>Use the substitute operator to substitute different values for
      each type of NULL. For more information on NULL substitution see the
      SciDB Operator Reference entry for substitute.</para>
    </sect2>
  </sect1>

  <sect1 id="array_dimensions">
    <title>Array Dimensions</title>

    <para>A SciDB array must have at least one dimension. Dimensions form the
    coordinate system for a SciDB array. There are several special types of
    dimensions: dimensions with overlapping chunks, unbounded dimensions, and
    noninteger dimensions.</para>

    <note>
      <para>The dimension size is determined by the range from the dimension
      start to end, so 0:99 and 1:100 would create the same dimension
      size.</para>
    </note>

    <sect2 remap="h3" xml:id="ChunkOverlap">
      <title>Chunk Overlap</title>

      <para>It is sometimes advantageous to have neighboring chunks of an
      array overlap with each other. Overlap is specified for each dimension
      of an array. For example, consider an array <code>A</code> with the
      following schema: <programlisting>
A&lt;a: int32&gt;[i=1:10,5,1, j=1:30,10,5]
</programlisting></para>

      <para>Array <code>A</code> has has two dimensions, <literal>i</literal>
      and <literal>j</literal>. Dimension <literal>i</literal> has size 10,
      chunk size 5, and chunk overlap 1. Dimension <literal>j</literal> has
      size 30, chunk size 10, and chunk overlap 5. SciDB stores cells from the
      chunk overlap area in both of the neighboring chunks.</para>

      <para>Some advantages of chunk overlap are:</para>

      <itemizedlist>
        <listitem>
          <para>Speeding up nearest-neighbor queries, where each chunk may
          need access to a few elements from its neighboring chunks,</para>
        </listitem>

        <listitem>
          <para>Detecting data clusters or data features that straddle more
          than one chunk.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 remap="h3" xml:id="Unboundeddimensions">
      <title>Unbounded Dimensions</title>

      <para>An array dimension can be created as an unbounded dimension by
      declaring the high boundary as '*'. When the high boundary is set as *
      the array boundaries are dynamically updated as new data is added to the
      array. This is useful when the dimension size is not known at <command>
          <code>CREATE ARRAY</code>
        </command> time. For example, this statement creates an array named
      <code>open</code> with two dimensions: <itemizedlist>
          <listitem>
            <para>Bounded dimension <code>I</code> of size 10, chunk size 10,
            and chunk overlap 0</para>
          </listitem>

          <listitem>
            <para>Unbounded dimension <code>J</code> of size *, chunk size 10,
            and chunk overlap 0.</para>
          </listitem>
        </itemizedlist> <programlisting language="test">
--aql CREATE ARRAY open &lt;val:double&gt;[I=0:9,10,0,J=0:*,10,0]; --show-output=no
</programlisting></para>
    </sect2>

    <sect2 remap="h3" xml:id="Non-integerdimensionsandMappingarrays">
      <title>Noninteger Dimensions and Mapping Arrays</title>

      <note>
        <para>.Version 12.10 of SciDB supports noninteger dimensions only
        partially.</para>
      </note>

      <para>Basic arrays in SciDB use the int64 data type for dimensions.
      SciDB also supports arrays with noninteger dimensions. These arrays map
      dimension <emphasis>values</emphasis> of a declared type to an internal
      int64-array <emphasis>position</emphasis>. Mapping is done through
      special mapping arrays internal to SciDB. Such arrays are useful when
      you are transforming data into multidimensional format where some
      dimensions represent factors or categories.</para>

      <para>For example, the array winners has a noninteger dimension named
      ID: <programlisting language="test">
--aql CREATE ARRAY winnersFlat &lt; event:string, year:int64, person:string, time:double &gt; [i=0:*,1000000,0]; --show-output=no --show-query=no
--aql CREATE ARRAY winners &lt;person:string, time:double&gt; [year=1996:2008,1000,0, event(string)=3,1000,0] --show-output=no 
--aql LOAD winnersFlat FROM '../examples/olympic_data.scidb'; --show-output=no --show-query=no
--afl redimension_store(winnersFlat,winners); --show-output=no --show-query=no
--schema winners; --show-output=yes --show-query=yes
</programlisting> Each of the dimensions <code>year</code> and
      <code>event</code> is a special one-dimensional SciDB array mapping each
      distinct value in the dimension to an integer coordinate.
      <programlisting language="test">
--aql SELECT * FROM winners:event; 
</programlisting> The attributes of the array <code>person</code> and
      <code>time</code> are: <programlisting language="test">
--aql SELECT * FROM winners;
</programlisting> </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Changing Array Names</title>

    <para>An array name is its unique identifier. You can use the AQL <code>
    <command>SELECT ... INTO</command> </code> statement to copy an array into
    another array with a new name. <programlisting language="test">
SELECT * INTO OlympicWinners FROM winners;
</programlisting> This means that both <code>winners</code> and
    <code>OlympicWinners</code> are distinct arrays in the database. To change
    an array name use the <code>rename</code> command: <programlisting
    language="test">
--afl rename(winners, OlympicWinners); --show-output=no
</programlisting></para>

    <para>You can use the <code>cast</code> command to change the name of the
    array, array attributes, and array dimensions. Unlike <code>rename</code>,
    the <code>cast</code> operator returns a new array with a few differences
    in the array schema relative to the input array. A single cast can be used
    to rename multiple items at once, for example, one or more attribute names
    and/or one or more dimension names. The input array and template array
    must have the same numbers and types of attributes and the same numbers
    and types of dimensions. <programlisting language="test">
--schema OlympicWinners; 
</programlisting> This query creates an array <code>winnerGrid</code> with
    integer dimensions that has renamed attributes <code>LastName</code> and
    <code>elapsedTime</code> and dimensions <code>Year</code> and
    <code>Event</code>. <programlisting language="test">
--aql SELECT * INTO winnerGrid FROM cast(OlympicWinners, &lt; LastName: string, elapsedTime: double&gt;
[x=1996:2008,1000,0,y=0:*,1000,0] ); --show-query=yes --show-output=yes
--schema winnerGrid; --show-query=no
</programlisting></para>
  </sect1>

  <sect1 id="array_dimensions_1">
    <title>Database Design</title>

    <sect2>
      <title>Selecting Dimensions and Attributes</title>

      <para>An important part of SciDB database design is selecting which
      values will be dimensions and which will be attributes. Dimensions form
      a <emphasis>coordinate</emphasis> system for the array. Adding
      dimensions to an array generally improves the performance of many types
      of queries by speeding up access to array data. Hence, the choice of
      dimensions depends on the types of queries expected to be run. Some
      guidelines for choosing dimensions are:</para>

      <itemizedlist>
        <listitem>
          <para>Dimensions provide selectivity and efficient access to array
          data. Any coordinate along which selection queries must be performed
          constitutes a good choice of dimension. If you want to select data
          subject to certain criteria (for example, all products of price
          greater than $100 whose brand name is longer than six letters that
          were sold before 01/01/2010) you may want to design your database
          such that the coordinates for those parameters are defined by
          dimensions.</para>
        </listitem>

        <listitem>
          <para>Array aggregation operators including group-by, window, or
          grid aggregates specify <emphasis>coordinates</emphasis> along which
          grouping must be performed. Such values must be present as
          dimensions of the array. For spatial and temporal applications, the
          space or time dimension is a good choice for a dimension.</para>
        </listitem>

        <listitem>
          <para>In the case of 2-dimensional arrays common in linear algebra
          applications, rows represent observations and columns represent
          variables, factors, or components. Matrix operations such as
          multiply, covariance, inverse, and best-fit linear equation solution
          are often performed on a 2-dimensional array structure.</para>
        </listitem>
      </itemizedlist>

      <para>These factors demand -- or at least strongly encourage -- that you
      choose to express certain variables as dimensions. In the absence of
      these factors, you can represent variables as either dimensions of
      attributes (although every array must have at least one attribute and at
      least one dimension). However, SciDB offers the flexibility to transform
      data from one array definition to another even after it has been loaded.
      This step is referred to as <emphasis>redimensioning</emphasis> the
      array and is especially useful when the same data set must be used for
      different types of analytic queries. Redimensioning is used to transform
      attributes to dimensions and vice-versa. Redimensioning an array is
      explained in the chapter "Changing Array Schemas."</para>
    </sect2>

    <sect2>
      <title>Chunk Size Selection</title>

      <para>The selection of chunk size in a dimension plays an important role
      in how well you can query your data. If a chunk size is too large or too
      small, it will negatively impact performance.</para>

      <para>To optimize performance of your SciDB array, you want each chunk
      to contain roughly 10 to 20 MB of data. So, for example, if your data
      set consists entirely of double-precision numbers, you would want a
      chunk size that contains somewhere between 500,000 and 1 million
      elements (assuming 8 bytes for every double-precision number).</para>

      <para>When a multiattribute SciDB array is stored, the array attributes
      are stored in different chunks, a process known as <emphasis>vertical
      partitioning</emphasis>. This is a consideration when you are choosing a
      chunk size. The size of an individual cell, or the number of attributes
      per cell, does not determine the total chunk size. Rather, the number of
      cells in the chunk is the number to use for determining chunk size. For
      arrays where every dimension has a fixed number of cells and every cell
      has a value you can do a straightforward calculation to find the correct
      chunk size.</para>

      <para>When the density of the data in a data set is highly skewed, that
      is, when the data is not evenly distributed along array dimensions, the
      calculation of chunk size becomes more difficult. The calculation is
      particularly difficult when it isn't known at array creation time how
      skewed the data is. In this case, you may want to use SciDB's
      <emphasis>repartitioning</emphasis> functionality to change the chunk
      size as necessary. Repartitioning an array is explained in the chapter
      "Changing Array Schemas."</para>
    </sect2>
  </sect1>
</chapter>
