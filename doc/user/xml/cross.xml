<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<refentry>
  <refnamediv>
    <refname>cross</refname>
    <refpurpose>Cross-product join </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis><command>SELECT</command> * <command>INTO</command> <replaceable>target_array</replaceable> <command>FROM</command> cross(<replaceable>left_array</replaceable>,<replaceable>right_array</replaceable>);</synopsis>
<synopsis>cross(<replaceable>left_array</replaceable>,<replaceable>right_array</replaceable>);</synopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>Summary</title>
    <para>Calculates the full cross product join of two arrays, for example A (m-dimensional) and B (n-dimensional),
such that the result is an m+n dimensional-array in which each cell is computed as the concatenation of the
attribute lists from corresponding cells in arrays A and B. For example, consider a 2-dimensional array A with
dimensions i, j, and a 1-dimensional array B with dimension k. The cell at coordinate position {i, j, k} of the
output is computed as the concatenation of cells {i, j} of A with cell at coordinate {k} of B.
</para>
  </refsect1>
  <refsect1>
    <title>Example</title>
    <informalexample>
      <para>This example returns the cross-join of a 3<symbol role="symbolfont">&times;</symbol>3 array with a vector of length 2.</para>
      <procedure>
        <step>
          <para>Create a 3<symbol role="symbolfont">&times;</symbol>3 array m3x3:<programlisting>CREATE ARRAY m3x3&lt;val:double&gt;[i=0:2,3,0,j=0:2,3,0];</programlisting></para>
        </step>
        <step>
          <para>Put values of  0&ndash;8 into m3x3:<programlisting>store(build(m3x3,i*3+j),m3x3);</programlisting></para>
        </step>
        <step>
          <para>Create a  vector of length 2 containing values 101 and 102:<programlisting>store(build(&lt;val:double&gt;[i=0:1,1,0],i+101),vector);</programlisting></para>
        </step>
        <step>
          <para>Find the cross of m3x3 and vector:<programlisting>store(cross(m3x3,vector),cross_array);</programlisting>This query returns:<screen>[
[[(0,101)],[(1,101)],[(2,101)]],
[[(3,101)],[(4,101)],[(5,101)]],
[[(6,101)],[(7,101)],[(8,101)]]];

[[[(0,102)],[(1,102)],[(2,102)]],
[[(3,102)],[(4,102)],[(5,102)]],
[[(6,102)],[(7,102)],[(8,102)]]]</screen>The array cross_array has schema:<programlisting>show(cross_array);</programlisting><screen>[(&quot;cross_array&lt;val:double,val_2:double&gt;
[i=0:2,3,0,j=0:2,3,0,i_2=0:1,1,0]&quot;)]</screen></para>
        </step>
      </procedure>
    </informalexample>
  </refsect1>
</refentry>
