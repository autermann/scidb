
--test
--start-query-logging

--set-format dcsv
--start-igdata
CREATE ARRAY test <val:double>[i=0:4,6,0, j=0:4,6,0]  
--set-format csv
--stop-igdata
--start-igdata
list('arrays')  
--set-format dense
--stop-igdata
show(test)  
scan(test)  
build(<val:double>[i=0:4,6,0, j=0:4,6,0],1)  
store(build(<val:double>[i=0:4,6,0, j=0:4,6,0],1),test)  
--start-igdata
store(build(<randomVal:int64>[i=0:2,3,0, j=0:3,4,0],random()%90+10),random_100)  
--stop-igdata
store(build(<val:double>[i=0:4,6,0, j=0:4,6,0],iif(i=j,1,0)),test)  
store(build(<val:double>[i=0:4,6,0, j=0:4,6,0],iif(i>j,1,iif(i=1,7,0))),test)  
--shell  --command="cat ../examples/m4x4.scidb " --store
--set-format dcsv
--start-igdata
create array A <val:int64> [i=1:4,4,0, j=1:4,4,0]  
--set-format dense
--stop-igdata
load(A, '../examples/m4x4.scidb')  
--set-format dcsv
--start-igdata
store(build(<val:double>[i=0:4,6,0, j=0:4,6,0], i*5 +j+1),test)  
--set-format dense
--stop-igdata
subarray(test,1,1,3,3)  
slice(test,j,2)  
slice(test,i,1)  
thin(test,0,2,0,2)  
thin(test,1,3,1,2)  
--set-format dcsv
--start-igdata
list('functions')  
store(sort(project(filter(list('functions'), library='scidb'),name)),functionsArray)  
--set-format dense
--stop-igdata
show(functionsArray) 
--set-format dcsv
--start-igdata
create array target <count:uint64 null> [name(string)=*,1000,0]  
--stop-igdata
redimension_store(functionsArray, target, count(*) as count)  

--stop-query-logging


--cleanup

remove(test)
remove(random_100)
remove(A)
remove(functionsArray)
remove(target)
