--setup
--start-query-logging

# NOTE: some notation for the array names
#
# the first part of the name identifies the contents it holds,
# such as ident for the identity matrix, or intRows for a matrix
# with values that increase monotonically in row-major order.
#
# RCcI means size R x C, with chunksize I x I (note that non-square chunk sizes are errors)
# RCnzCI is the same, but with dimensions that start at some positive number other than 0
# RCnnzCI would be the same as that, but with a negative number (not in use yet)
# 

# identity: 11c1, 22c1, 22c2
create immutable array ident11c1<a: double >   [r=0:0,1,0, c=0:0,1,0]
create immutable array ident11c2<a: double >   [r=0:0,2,0, c=0:0,2,0]
create immutable array ident22c1<a: double >   [r=0:1,1,0, c=0:1,1,0]
create immutable array ident22c2<a: double >   [r=0:1,2,0, c=0:1,2,0]
store(build(ident11c1, IIF(r=c, 1, 0)), ident11c1)
store(build(ident11c2, IIF(r=c, 1, 0)), ident11c2)
store(build(ident22c1, IIF(r=c, 1, 0)), ident22c1)
store(build(ident22c2, IIF(r=c, 1, 0)), ident22c2)

# identity: with non-zero-based dimensions
create immutable array ident11nzc1<a: double >   [r=3:3,1,0, c=5:5,1,0]
create immutable array ident11nzc2<a: double >   [r=3:3,2,0, c=5:5,2,0]
create immutable array ident22nzc1<a: double >   [r=3:4,1,0, c=5:6,1,0]
create immutable array ident22nzc2<a: double >   [r=3:4,2,0, c=5:6,2,0]
store(build(ident11nzc1, IIF(r+2=c, 1, 0)), ident11nzc1)
store(build(ident11nzc2, IIF(r+2=c, 1, 0)), ident11nzc2)
store(build(ident22nzc1, IIF(r+2=c, 1, 0)), ident22nzc1)
store(build(ident22nzc2, IIF(r+2=c, 1, 0)), ident22nzc2)

# integers by rows, chunksizes 1 & 2 : 22c1, 22c2
create immutable array intRows11c1<a: double > [r=0:0,1,0, c=0:0,1,0]
create immutable array intRows22c1<a: double > [r=0:1,1,0, c=0:1,1,0]
create immutable array intRows22c2<a: double > [r=0:1,2,0, c=0:1,2,0]
store(build(intRows11c1, 1+r*1+c),      intRows11c1)
store(build(intRows22c1, 1+r*2+c),      intRows22c1)
store(build(intRows22c2, 1+r*2+c),      intRows22c2)

# integers by rows, chunksizes 1 & 2 : 22c1, 22c2, , nz-based
create immutable array intRows11nzc1<a: double > [r=7:7,1,0, c=11:11,1,0]
create immutable array intRows22nzc1<a: double > [r=7:8,1,0, c=11:12,1,0]
create immutable array intRows22nzc2<a: double > [r=7:8,2,0, c=11:12,2,0]
store(build(intRows11nzc1, 1+(r-7)*1+(c-11)),      intRows11nzc1)
store(build(intRows22nzc1, 1+(r-7)*2+(c-11)),      intRows22nzc1)
store(build(intRows22nzc2, 1+(r-7)*2+(c-11)),      intRows22nzc2)

# integers by rows, nonsquare, 12c1&22, 21c1&22
create immutable array intRows12c1<a: double > [r=0:0,1,0, c=0:1,1,0]
create immutable array intRows12c2<a: double > [r=0:0,2,0, c=0:1,2,0]
create immutable array intRows21c1<a: double > [r=0:1,1,0, c=0:0,1,0]
create immutable array intRows21c2<a: double > [r=0:1,2,0, c=0:0,2,0]
store(build(intRows12c1, 1+r*2+c),      intRows12c1)
store(build(intRows12c2, 1+r*2+c),      intRows12c2)
store(build(intRows21c1, 1+r*1+c),      intRows21c1)
store(build(intRows21c2, 1+r*1+c),      intRows21c2)

# integers by rows, nonsquare, 12c1&22, 21c1&22 nz-based
create immutable array intRows12nzc1<a: double > [r=13:13,1,0, c=17:18,1,0]
create immutable array intRows12nzc2<a: double > [r=13:13,2,0, c=17:18,2,0]
create immutable array intRows21nzc1<a: double > [r=13:14,1,0, c=17:17,1,0]
create immutable array intRows21nzc2<a: double > [r=13:14,2,0, c=17:17,2,0]
store(build(intRows12nzc1, 1+(r-13)*2+(c-17)),      intRows12nzc1)
store(build(intRows12nzc2, 1+(r-13)*2+(c-17)),      intRows12nzc2)
store(build(intRows21nzc1, 1+(r-13)*1+(c-17)),      intRows21nzc1)
store(build(intRows21nzc2, 1+(r-13)*1+(c-17)),      intRows21nzc2)

# load same array as SciDB mutliply() test uses
create immutable array fileDense66c33 <a: double >   [r=0:5,3,0, c=0:5,3,0]
load(fileDense66c33,'../tests/harness/testcases/data/dense.txt')

# and to make it output list in order
create immutable array output66c66 <a: double > [r=0:5,6,0, c=0:5,6,0]

load_library('dense_linear_algebra')

--test

# simplest case: I * I + 0 -> I
gemm(ident11c1,   ident11c1, build(ident11c1,0))
# prove it defines its output schema fully (stored into un-created array)
store(gemm(ident11c1,   ident11c1, build(ident11c1,0)), tmp)
remove(tmp)

# M * I -> M ; I * M -> M ; M * M -> M^2
# 11c1
gemm(intRows11c1,   ident11c1, build(ident11c1,0))
gemm(ident11c1,   intRows11c1, build(ident11c1,0))
gemm(intRows11c1, intRows11c1, build(ident11c1,0))
# 11ncz1
gemm(intRows11nzc1,   ident11nzc1, build(ident11c1,0))
gemm(ident11nzc1,   intRows11nzc1, build(ident11c1,0))
gemm(intRows11nzc1, intRows11nzc1, build(ident11c1,0))

# 22c1
gemm(intRows22c1,   ident22c1, build(ident22c1,0))
gemm(ident22c1,   intRows22c1, build(ident22c1,0))
gemm(intRows22c1, intRows22c1, build(ident22c1,0))
# 22nzc1
# NOT YET - nz start matrices act like a sparse matrix ... answer is shifted within larger matrix
#--echo next three should have same answers as prior 3
#gemm(intRows22nzc1,   ident22nzc1, build(ident22c1,0))
#gemm(ident22nzc1,   intRows22nzc1, build(ident22c1,0))
#gemm(intRows22nzc1, intRows22nzc1, build(ident22c1,0))

# 22c2
gemm(intRows22c2,   ident22c2, build(ident22c2,0))
gemm(ident22c2,   intRows22c2, build(ident22c2,0))
gemm(intRows22c2, intRows22c2, build(ident22c2,0))
# 22nzc2
--echo next three should have same answers as prior 3
gemm(intRows22nzc2,   ident22nzc2, build(ident22c2,0))
gemm(ident22nzc2,   intRows22nzc2, build(ident22c2,0))
gemm(intRows22nzc2, intRows22nzc2, build(ident22c2,0))

# a larger square test
# M66c33 * M66c33
# use the same array as the multiply() test and repart it so it is not output with sub-chunks
# for the human to have to decipher.
repart(gemm(fileDense66c33, fileDense66c33, build(fileDense66c33,0)), output66c66)

# nonsquare matrices
# 12 * 21 -> 11
# broken: rectangular chunksize-1 multiply
#--echo next 2 results should be identical -- the number 5
# gemm(intRows12c1, intRows21c1, build(ident11c1,0))
gemm(intRows12c2, intRows21c2, build(ident11c2,0))

# nonsquare matrices, non 0-based indices for input
# 12 * 21 -> 11
#gemm(intRows12nzc1, intRows21nzc1, build(ident11c1,0))
#gemm(intRows12nzc2, intRows21nzc2, build(ident11c2,0))

# nonsquare matrices, non 0-based indices for output,too
# 12 * 21 -> 11
#gemm(intRows12nzc1, intRows21nzc1, build(ident11nzc1,0))
#gemm(intRows12nzc2, intRows21nzc2, build(ident11nzc2,0))

# nonsquare matrices, reverse order
# 21 * 12 -> 22
# broken: rectangular chunksize-1 multiply
#--echo next 2 results should be identical
#gemm(intRows21c1, intRows12c1, build(ident22c1,0))
gemm(intRows21c2, intRows12c2, build(ident22c2,0))

# nonsquare matrices, reverse order, non 0-based indices for input
# 21 * 12 -> 22
#gemm(intRows21nzc1, intRows12nzc1, build(ident22c1,0))
#gemm(intRows21nzc2, intRows12nzc2, build(ident22c2,0))

# nonsquare matrices, reverse order, non 0-based indices for output,too
# 21 * 12 -> 22
#gemm(intRows21nzc1, intRows12nzc1, build(ident22nzc1,0))
#gemm(intRows21nzc2, intRows12nzc2, build(ident22nzc2,0))

# show that gemm's output has RANDOM access
# (transpose() is an exampe that currently requires RANDOM access)
--echo next output (by rows) should be 7, 15, 10, 22
transpose(gemm(intRows22c2, intRows22c2, build(ident22c2,0)))

# make sure we can cascade gemm operators
# (when we can handle this)
# join(join(gemm(intRows22c2, intRows22c2, build(ident22c2,0)), gemm(intRows22c2, intRows22c2, build(ident22c2,0))), join(gemm(intRows22c2, intRows22c2, build(ident22c2,0)), gemm(intRows22c2, intRows22c2, build(ident22c2,0))))

--cleanup

# identity-squares
remove(ident11c1)
remove(ident11c2)
remove(ident22c1)
remove(ident22c2)

# identity-squares, non-zero-based indices
remove(ident11nzc1)
remove(ident11nzc2)
remove(ident22nzc1)
remove(ident22nzc2)

# row-major numberings, squares
remove(intRows11c1)
remove(intRows22c1)
remove(intRows22c2)

# row-major-numberings,  squares, non-zero-based
remove(intRows11nzc1)
remove(intRows22nzc1)
remove(intRows22nzc2)

# row-major numberings, rectangular
remove(intRows12c1)
remove(intRows21c1)
remove(intRows12c2)
remove(intRows21c2)

# row-major numberings, rectangular non-zero based
remove(intRows12nzc1)
remove(intRows21nzc1)
remove(intRows12nzc2)
remove(intRows21nzc2)

# one oddball test
remove(fileDense66c33)
remove(output66c66)
