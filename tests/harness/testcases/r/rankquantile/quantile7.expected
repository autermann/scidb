SCIDB QUERY : <create array A <a:string_10> [x=-1:3,2,0]>
Query was executed successfully

SCIDB QUERY : <store(apply( build(<a:string_3> [x=0:1,2,0 ,y=0:1,2,0],string(40/2.5 *x+1)),b,x/1.1),P)>
{x,y} a,b
{0,0} "1",0
{0,1} "1",0
{1,0} "17",0.909091
{1,1} "17",0.909091

SCIDB QUERY : <create array ABC <a: int32, b: string, c: double, d: int64, e: bool, f: float, g: string_10>[i=1:1000,100,0]>
Query was executed successfully

SCIDB QUERY : <show(P)>
{i} schema
{0} "P<a:string_3,b:double> [x=0:1,2,0,y=0:1,2,0]"

SCIDB QUERY : <build(A,string(1000000000*(x+1)))>
[An error expected at this place for the query "build(A,string(1000000000*(x+1)))". And it failed with error code = scidb::SCIDB_SE_EXECUTION::SCIDB_LE_TRUNCATION. Expected error code = scidb::SCIDB_SE_EXECUTION::SCIDB_LE_TRUNCATION.]

SCIDB QUERY : <store(build(A,string(100000000*(x+2))),A)>
[("100000000"),("200000000"),("300000000"),("400000000"),("500000000")]

SCIDB QUERY : <load(ABC, '../tests/harness/testcases/data/spsp.txt')>
[Query was executed successfully, ignoring data output by this query.]

SCIDB QUERY : <sort(A)>
[("100000000"),("200000000"),("300000000"),("400000000"),("500000000")]

SCIDB QUERY : <sort(A,20)>
[("100000000"),("200000000"),("300000000"),("400000000"),("500000000"),(),(),(),(),(),(),(),(),(),(),(),(),(),(),()]

SCIDB QUERY : <sort(A,a desc)>
[("500000000"),("400000000"),("300000000"),("200000000"),("100000000")]

SCIDB QUERY : <sort(reverse(A))>
[("100000000"),("200000000"),("300000000"),("400000000"),("500000000")]

SCIDB QUERY : <sort(filter(A, a>'100000000' and a<'4000000'))>
[("200000000"),("300000000"),(),(),()]

SCIDB QUERY : <sort(filter(A, a>'100000000' and a<'4000000'), a desc)>
[("300000000"),("200000000"),(),(),()]

SCIDB QUERY : <sort(filter(A, a<>'300000000'))>
[("100000000"),("200000000"),("400000000"),("500000000"),()]

SCIDB QUERY : <sort(filter(A, a<>'300000000'),10)>
[("100000000"),("200000000"),("400000000"),("500000000"),(),(),(),(),(),()]

SCIDB QUERY : <rank(A)>
[("100000000",1),("200000000",2),("300000000",3),("400000000",4),("500000000",5)]

SCIDB QUERY : <rank(filter(A, a>'100000000' and a<'4000000'))>
[(),("200000000",1),("300000000",2),(),()]

SCIDB QUERY : <quantile(A,2)>
[(0,"100000000"),(0.5,"300000000"),(1,"500000000")]

SCIDB QUERY : <quantile(A,4)>
[(0,"100000000"),(0.25,"200000000"),(0.5,"300000000"),(0.75,"400000000"),(1,"500000000")]

SCIDB QUERY : <quantile(A,10)>
[(0,"100000000"),(0.1,"100000000"),(0.2,"100000000"),(0.3,"200000000"),(0.4,"200000000"),(0.5,"300000000"),(0.6,"300000000"),(0.7,"400000000"),(0.8,"400000000"),(0.9,"500000000"),(1,"500000000")]

SCIDB QUERY : <quantile(A,20)>
[(0,"100000000"),(0.05,"100000000"),(0.1,"100000000"),(0.15,"100000000"),(0.2,"100000000"),(0.25,"200000000"),(0.3,"200000000"),(0.35,"200000000"),(0.4,"200000000"),(0.45,"300000000"),(0.5,"300000000"),(0.55,"300000000"),(0.6,"300000000"),(0.65,"400000000"),(0.7,"400000000"),(0.75,"400000000"),(0.8,"400000000"),(0.85,"500000000"),(0.9,"500000000"),(0.95,"500000000"),(1,"500000000")]

SCIDB QUERY : <quantile(filter(A, a>'100000000' and a<'4000000'),2)>
[(0,"200000000"),(0.5,"200000000"),(1,"300000000")]

SCIDB QUERY : <quantile(filter(A, a>'100000000' and a<'4000000'),5)>
[(0,"200000000"),(0.2,"200000000"),(0.4,"200000000"),(0.6,"300000000"),(0.8,"300000000"),(1,"300000000")]

SCIDB QUERY : <quantile(filter(A, a>'100000000' and a<'4000000'),12)>
[(0,"200000000"),(0.0833333,"200000000"),(0.166667,"200000000"),(0.25,"200000000"),(0.333333,"200000000"),(0.416667,"200000000"),(0.5,"200000000"),(0.583333,"300000000"),(0.666667,"300000000"),(0.75,"300000000"),(0.833333,"300000000"),(0.916667,"300000000"),(1,"300000000")]

SCIDB QUERY : <sort(P)>
[("1",0),("1",0),("17",0.909091),("17",0.909091)]

SCIDB QUERY : <sort(P,a desc)>
[("17",0.909091),("17",0.909091),("1",0),("1",0)]

SCIDB QUERY : <sort(filter(P,b>0),a desc)>
[("17",0.909091),("17",0.909091),(),()]

SCIDB QUERY : <rank(P,a)>
[[("1",1),("1",1)],[("17",3),("17",3)]]

SCIDB QUERY : <rank(P,b)>
[[(0,1),(0,1)],[(0.909091,3),(0.909091,3)]]

SCIDB QUERY : <rank(filter(P,b>0))>
[[(),()],[("17",1),("17",1)]]

SCIDB QUERY : <rank(filter(P,b>0),a desc)>
[[(),()],[("17",1),("17",1)]]

SCIDB QUERY : <quantile(P,2,a)>
[(0,"1"),(0.5,"1"),(1,"17")]

SCIDB QUERY : <quantile(P,4,a)>
[(0,"1"),(0.25,"1"),(0.5,"1"),(0.75,"17"),(1,"17")]

SCIDB QUERY : <quantile(P,10,a)>
[(0,"1"),(0.1,"1"),(0.2,"1"),(0.3,"1"),(0.4,"1"),(0.5,"1"),(0.6,"17"),(0.7,"17"),(0.8,"17"),(0.9,"17"),(1,"17")]

SCIDB QUERY : <quantile(filter(P,b>0),2,a)>
[(0,"17"),(0.5,"17"),(1,"17")]

SCIDB QUERY : <quantile(filter(P,b>0),4,a)>
[(0,"17"),(0.25,"17"),(0.5,"17"),(0.75,"17"),(1,"17")]

SCIDB QUERY : <quantile(filter(P,b>0),4,b)>
[(0,0.909091),(0.25,0.909091),(0.5,0.909091),(0.75,0.909091),(1,0.909091)]

SCIDB QUERY : <quantile(filter(P,b>0),10,b)>
[(0,0.909091),(0.1,0.909091),(0.2,0.909091),(0.3,0.909091),(0.4,0.909091),(0.5,0.909091),(0.6,0.909091),(0.7,0.909091),(0.8,0.909091),(0.9,0.909091),(1,0.909091)]

SCIDB QUERY : <sort(ABC)>
{0}[{0}(1,"first",4.44557,45,true,44.556,"FIRST_1"),{1}(1000,"last",4.5567,44,false,44.332,"LAST_10")]

SCIDB QUERY : <sort(ABC,g desc)>
{0}[{0}(1000,"last",4.5567,44,false,44.332,"LAST_10"),{1}(1,"first",4.44557,45,true,44.556,"FIRST_1")]

SCIDB QUERY : <sort(ABC,g)>
{0}[{0}(1,"first",4.44557,45,true,44.556,"FIRST_1"),{1}(1000,"last",4.5567,44,false,44.332,"LAST_10")]

SCIDB QUERY : <sort(ABC,e)>
{0}[{0}(1000,"last",4.5567,44,false,44.332,"LAST_10"),{1}(1,"first",4.44557,45,true,44.556,"FIRST_1")]

SCIDB QUERY : <rank(ABC)>
[{1}(1,1)];
[{1000}(1000,2)]

SCIDB QUERY : <rank(ABC,e)>
[{1}(true,2)];
[{1000}(false,1)]

SCIDB QUERY : <rank(ABC,e desc)>
[{1}(true,2)];
[{1000}(false,1)]

SCIDB QUERY : <quantile(ABC,2)>
{0}[{0}(0,1),{1}(0.5,1),{2}(1,1000)]

SCIDB QUERY : <quantile(ABC,3,g)>
{0}[{0}(0,"FIRST_1"),{1}(0.333333,"FIRST_1"),{2}(0.666667,"LAST_10"),{3}(1,"LAST_10")]

SCIDB QUERY : <quantile(ABC,4,a)>
{0}[{0}(0,1),{1}(0.25,1),{2}(0.5,1),{3}(0.75,1000),{4}(1,1000)]

SCIDB QUERY : <quantile(ABC,4,e)>
{0}[{0}(0,false),{1}(0.25,false),{2}(0.5,false),{3}(0.75,true),{4}(1,true)]

SCIDB QUERY : <quantile(ABC,4,a,g)>
[An error expected at this place for the query "quantile(ABC,4,a,g)". And it failed with error code = scidb::SCIDB_SE_INTERNAL::SCIDB_LE_WRONG_OPERATOR_ARGUMENT2. Expected error code = scidb::SCIDB_SE_INTERNAL::SCIDB_LE_WRONG_OPERATOR_ARGUMENT2.]

SCIDB QUERY : <remove(A)>
Query was executed successfully

SCIDB QUERY : <remove(P)>
Query was executed successfully

SCIDB QUERY : <remove(ABC)>
Query was executed successfully

